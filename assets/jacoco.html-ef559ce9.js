import{_ as a,o as s,c as n,e}from"./app-04e6f892.js";const o={},t=e(`<p>参考： https://www.bilibili.com/video/BV1tr4y1i7f1/</p><p>Jacoco 是一个开源的代码覆盖率工具，它针对的开发语言是 Java。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><ul><li>Java - Jacoco</li><li>C++ - Testwell</li><li>Python - Coverage.py</li></ul></div><p>Jacoco 包含多种尺度的代码覆盖率计数器：</p><ul><li>指令级覆盖（Instructions,Ccoverage） —— 计数单元是单个 java 二进制代码指令，指令覆盖率提供了代码是否被执行的信息，度量完全独立源码格式。</li><li>分支覆盖（Branches,C1coverage） <ul><li>红色 —— 全部未覆盖：全部分支均未执行</li><li>黄色 —— 部分覆盖：部分分支被执行</li><li>绿色 —— 全覆盖： 全部分支已执行</li></ul></li><li>圈复杂度（Cyclomatic Complexity） —— 在（线性）组合中，计算在一个方法里面所有可能路径的最小数目，缺失的复杂度表示测试样例没有完全覆盖到这个模块。</li><li>行覆盖（Lines）</li><li>方法覆盖（non-abstract methods）</li><li>类覆盖（classes）</li></ul><h2 id="jacoco-原理" tabindex="-1"><a class="header-anchor" href="#jacoco-原理" aria-hidden="true">#</a> Jacoco 原理</h2><p>Jacoco 使用插桩的方式来记录代码覆盖率，具体来说是通过一个 probe 探针来注入的。</p><p>插桩模式有两种：</p><ul><li><strong>on-the-fly 模式</strong> —— JVM 中通过 <code>-javaagent</code> 参数指定特定的 jar 文件启动 Instrumentation 的代理程序。代理程序在通过 JVMTI 机制将统计代码插入 class 中（具体来说该机制允许在 ClassLoader 装载一个 class 前，将该 class 文件交给代理程序进行判断、转换、修改、添加自定义的 “代码覆盖率统计” 代码），然后就可以在 JVM 执行测试代码的过程中完成测试覆盖率分析。</li><li><strong>offline 模式</strong> —— 在测试之前先对文件进行插桩，生成插过桩的 class 文件或者 jar 包。然后运行相关程序统计这些 class 文件或 jar 包哪些插桩位置被触发，从而得到代码覆盖率信息。</li></ul><p>一般来说使用 on-the-fly 模式。这种模式更加灵活，不会污染代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 提前准备</span>
<span class="token comment"># 1. jacococli.jar</span>
<span class="token comment"># 2. jacocoagent.jar</span>

<span class="token comment"># 命令</span>

<span class="token comment"># 统计数据</span>
<span class="token comment"># includes —— 指定需要插桩的代码</span>
<span class="token comment"># output —— 输出的形式。tcpserver（启动web服务的形式展现输出，这种形式需要额外指定port、address）</span>
<span class="token function">java</span> <span class="token parameter variable">-javaagent:jacocoagent.jar</span><span class="token operator">=</span>includes<span class="token operator">=</span>*,output<span class="token operator">=</span>tcpserver,port<span class="token operator">=</span><span class="token number">6300</span>,address<span class="token operator">=</span>localhost,append<span class="token operator">=</span>true <span class="token parameter variable">-jar</span> demo-0.0.1.jar
<span class="token comment"># dump成exec文件</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> jacococli.jar dump <span class="token parameter variable">--address</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">--port</span> <span class="token number">6300</span> <span class="token parameter variable">--destfile</span> jacoco-demo.exec
<span class="token comment"># 生成report报表（html）</span>
<span class="token comment"># --classfiles —— 被测项目字节码路径</span>
<span class="token comment"># --sourcefiles —— 被测项目源码路径</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> jcococli.jar report jacoco-demo.exec <span class="token parameter variable">--classfiles</span> D:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>devops<span class="token punctuation">\\</span>SBD<span class="token punctuation">\\</span>target<span class="token punctuation">\\</span>classes <span class="token parameter variable">--sourcefiles</span> D:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>devops<span class="token punctuation">\\</span>SBD<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>main<span class="token punctuation">\\</span>java <span class="token parameter variable">--html</span> html-report <span class="token parameter variable">--xml</span> report.xml <span class="token parameter variable">--encoding</span><span class="token operator">=</span>utf-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jacoco-增量覆盖" tabindex="-1"><a class="header-anchor" href="#jacoco-增量覆盖" aria-hidden="true">#</a> Jacoco 增量覆盖</h2><p>Jacoco 原生不支持增量覆盖统计，但是有二开库。</p><p>二开： https://gitee.com/Dray/jacoco.git <br> 增量： https://gitee.com/Dray/code-diff.git</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># jacoco 客户端，收集信息</span>
<span class="token function">java</span> <span class="token parameter variable">-javaagent:jacocoagent.jar</span><span class="token operator">=</span>includes<span class="token operator">=</span>*,output<span class="token operator">=</span>tcpserver,port<span class="token operator">=</span><span class="token number">6300</span>,address<span class="token operator">=</span>localhost,append<span class="token operator">=</span>true <span class="token parameter variable">-jar</span> demo-0.0.1.jar
<span class="token comment"># 二开 cli 包生成 exec 文件</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> cli-0.8.7-diff.jar dump <span class="token parameter variable">--address</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">--port</span> <span class="token number">6300</span> <span class="token parameter variable">--destfile</span> jacoco-demo.exec
<span class="token comment"># 获取两次提交代码差异</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> code-diff.jar <span class="token comment"># 启动 diff 项目，地址： http://127.0.0.1:8085/doc.html</span>
<span class="token comment"># 二开 cli 包生成 report 增量报表</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> cli-0.8.7-diff.jar report jacoco-demo.exec <span class="token parameter variable">--classfiles</span> D:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>devops<span class="token punctuation">\\</span>SBD<span class="token punctuation">\\</span>target<span class="token punctuation">\\</span>classes <span class="token parameter variable">--sourcefiles</span> D:<span class="token punctuation">\\</span>code<span class="token punctuation">\\</span>devops<span class="token punctuation">\\</span>SBD<span class="token punctuation">\\</span>src<span class="token punctuation">\\</span>main<span class="token punctuation">\\</span>java <span class="token parameter variable">--html</span> html-report-diff <span class="token parameter variable">--xml</span> report-divv.xml <span class="token parameter variable">--diffcode</span> <span class="token string">&quot;.....&quot;</span> <span class="token parameter variable">--encoding</span><span class="token operator">=</span>utf-8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>todo</p><h2 id="jacoco-maven-plugin" tabindex="-1"><a class="header-anchor" href="#jacoco-maven-plugin" aria-hidden="true">#</a> jacoco-maven-plugin</h2><p>jacoco 同时支持 junit4 和 junit5 版本（需确保test引入各自的引擎，如<code>junit-vintage-engine</code>或<code>jupiter-engine</code>），只要执行了测试单元方法，就能统计到运行结果（在target/site/jacoco目录中）。</p>`,18),c=[t];function p(l,r){return s(),n("div",null,c)}const d=a(o,[["render",p],["__file","jacoco.html.vue"]]);export{d as default};
