import{_ as r,r as i,o as d,c,a as n,b as e,d as s,w as o,e as l}from"./app-04e6f892.js";const u={},p=n("h2",{id:"编译工程工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#编译工程工具","aria-hidden":"true"},"#"),e(" 编译工程工具")],-1),b=l(`<h2 id="二进制文件结构" tabindex="-1"><a class="header-anchor" href="#二进制文件结构" aria-hidden="true">#</a> 二进制文件结构</h2><p>先准备一个二进制可执行文件：</p><details class="custom-container details"><p>代码</p><p>calc.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>File not found</code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>add.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>File not found</code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>tfunc.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>File not found</code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>编译/运行（静态库）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token comment"># 【静态链接】</span>
<span class="token comment"># .o 编译过程各自独立。虽然其中calc.c使用了另外两个的符号，但是此时并不知道那些符号是在哪个文件中定义的。</span>
<span class="token comment"># -st 当链接器把所有的.o文件链接成可执行文件的过程中，可执行文件才能确定那些符号是在哪里。</span>
gcc <span class="token parameter variable">-c</span> add.c tfunc.c calc.c
<span class="token comment"># gcc add.o tfunc.o calc.o -o calc-st</span>
ar <span class="token parameter variable">-r</span> liboperation.a add.o tfunc.o
gcc calc.c liboperation.a <span class="token parameter variable">-o</span> calc-st

<span class="token comment"># 【动态链接】</span>
gcc <span class="token parameter variable">-c</span> <span class="token parameter variable">-fpic</span> tfunc.c add.c
gcc <span class="token parameter variable">-shared</span> tfunc.o add.o <span class="token parameter variable">-o</span> liboperation.so
gcc calc.c <span class="token parameter variable">-o</span> calc-dy <span class="token parameter variable">-loperation</span> -L<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span> -Wl,-rpath<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span> 

<span class="token comment"># 运行</span>
./calc <span class="token number">1</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="elf-文件" tabindex="-1"><a class="header-anchor" href="#elf-文件" aria-hidden="true">#</a> ELF 文件</h3><p>ELF（Executable and Linkable Format，可执行和可链接格式）</p>`,5),v={class:"custom-container details"},m=n("p",null,"参考：",-1),h={href:"https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow",target:"_blank",rel:"noopener noreferrer"},f=l(`<p>通过 <code>file calc</code> 可看到 <code>calc</code> 程序的文件类型为 ELF</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">file</span> calc
calc: ELF <span class="token number">64</span>-bit LSB pie executable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>0e4f3ed1b2b35f1c63e26a0b7e6b59bfb2ebe1a2, <span class="token keyword">for</span> GNU/Linux <span class="token number">3.2</span>.0, not stripped
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ELF文件格式如下：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>ELF header （ELF 头部）</td><td></td></tr><tr><td>Program header table （程序表头）</td><td></td></tr><tr><td>Sections （节）</td><td></td></tr><tr><td>Section header table （节表头）</td><td></td></tr></tbody></table><p>通过 <code>readelf -l calc</code> 可看到 <code>calc</code> 程序的二进制区域划分</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-l</span> <span class="token comment"># 列出二进制全部区域划分信息</span>
<span class="token parameter variable">-h</span> <span class="token comment"># 头文件信息 | 这个内容与结构体Elf32_Ehdr中的成员变量是一一对应的！</span>
<span class="token parameter variable">-S</span> <span class="token comment"># 片段布局</span>

$ readelf <span class="token parameter variable">-l</span> calc

Elf <span class="token function">file</span> <span class="token builtin class-name">type</span> is DYN <span class="token punctuation">(</span>Position-Independent Executable <span class="token function">file</span><span class="token punctuation">)</span> <span class="token comment"># 💡位置独立的可执行文件</span>
Entry point 0x1080                                          <span class="token comment"># 💡入口地址</span>
There are <span class="token number">13</span> program headers, starting at offset <span class="token number">64</span>         <span class="token comment"># 💡13个程序头信息，从第64个偏移地址开始</span>

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000002d8 0x00000000000002d8  R      0x8
  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318
                 0x000000000000001c 0x000000000000001c  R      0x1
      <span class="token punctuation">[</span>Requesting program interpreter: /lib64/ld-linux-x86-64.so.2<span class="token punctuation">]</span>
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000660 0x0000000000000660  R      0x1000
  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
                 0x0000000000000225 0x0000000000000225  R E    0x1000
  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
                 0x0000000000000144 0x0000000000000144  R      0x1000
  LOAD           0x0000000000002db0 0x0000000000003db0 0x0000000000003db0
                 0x0000000000000260 0x0000000000000268  RW     0x1000
  DYNAMIC        0x0000000000002dc0 0x0000000000003dc0 0x0000000000003dc0
                 0x00000000000001f0 0x00000000000001f0  RW     0x8
  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000030 0x0000000000000030  R      0x8
  NOTE           0x0000000000000368 0x0000000000000368 0x0000000000000368
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338
                 0x0000000000000030 0x0000000000000030  R      0x8
  GNU_EH_FRAME   0x0000000000002014 0x0000000000002014 0x0000000000002014
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x0000000000002db0 0x0000000000003db0 0x0000000000003db0
                 0x0000000000000250 0x0000000000000250  R      0x1

 Section to Segment mapping:
  Segment Sections<span class="token punctuation">..</span>.
   00
   01     .interp
   02     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
   03     .init .plt .plt.got .plt.sec .text .fini
   04     .rodata .eh_frame_hdr .eh_frame
   05     .init_array .fini_array .dynamic .got .data .bss
   06     .dynamic
   07     .note.gnu.property
   08     .note.gnu.build-id .note.ABI-tag
   09     .note.gnu.property
   <span class="token number">10</span>     .eh_frame_hdr
   <span class="token number">11</span>
   <span class="token number">12</span>     .init_array .fini_array .dynamic .got
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态库-vs-动态库" tabindex="-1"><a class="header-anchor" href="#静态库-vs-动态库" aria-hidden="true">#</a> 静态库 vs 动态库</h3><ul><li><p>静态链接库（Static Link Library） —— 静态库是在链接可执行文件时，代码段和数据段直接拷贝到可执行文件中</p><details class="custom-container details"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ objdump <span class="token parameter variable">-r</span> liboperation.a <span class="token comment"># 有两个.o文件需要重定位（RELOCATION）</span>
In archive liboperation.a:

add.o:     <span class="token function">file</span> <span class="token function">format</span> elf64-x86-64

RELOCATION RECORDS FOR <span class="token punctuation">[</span>.eh_frame<span class="token punctuation">]</span>:
OFFSET           TYPE              VALUE
0000000000000020 R_X86_64_PC32     .text



tfunc.o:     <span class="token function">file</span> <span class="token function">format</span> elf64-x86-64

RELOCATION RECORDS FOR <span class="token punctuation">[</span>.text<span class="token punctuation">]</span>:
OFFSET           TYPE              VALUE
000000000000001d R_X86_64_PLT32    atoi-0x0000000000000004


RELOCATION RECORDS FOR <span class="token punctuation">[</span>.eh_frame<span class="token punctuation">]</span>:
OFFSET           TYPE              VALUE
0000000000000020 R_X86_64_PC32     .text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li><li><p>动态链接库（Dynamic Link Library，简称DLL） —— 不像静态库是在链接可执行文件时，代码段和数据段直接拷贝到可执行文件中。动态库来是在运行时加载动态库代码（由 ld-linux.so 来负责读取），因此无法在编译和链接阶段获取代码段的符号地址（代码段的符号包括引用的全局数据，调用的函数等）。</p><details class="custom-container details"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ objdump <span class="token parameter variable">-r</span> liboperation.so <span class="token comment"># 不需要重定位（RELOCATION）</span>

liboperation.so:     <span class="token function">file</span> <span class="token function">format</span> elf64-x86-64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li></ul><h3 id="静态链接重定位过程" tabindex="-1"><a class="header-anchor" href="#静态链接重定位过程" aria-hidden="true">#</a> 静态链接重定位过程</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ readelf <span class="token parameter variable">-h</span> add.o
ELF Header:
  Magic:   7f <span class="token number">45</span> 4c <span class="token number">46</span> 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              <span class="token number">2</span><span class="token string">&#39;s complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          464 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           64 (bytes)
  Number of section headers:         12
  Section header string table index: 11
$ readelf -s add.o
Symbol table &#39;</span>.symtab&#39; contains <span class="token number">4</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     <span class="token number">0</span>: 0000000000000000     <span class="token number">0</span> NOTYPE  LOCAL  DEFAULT  UND
     <span class="token number">1</span>: 0000000000000000     <span class="token number">0</span> FILE    LOCAL  DEFAULT  ABS add.c
     <span class="token number">2</span>: 0000000000000000     <span class="token number">0</span> SECTION LOCAL  DEFAULT    <span class="token number">1</span> .text
     <span class="token number">3</span>: 0000000000000000    <span class="token number">24</span> FUNC    GLOBAL DEFAULT    <span class="token number">1</span> <span class="token function">add</span>

<span class="token comment"># -Ax: 显示地址的时候，用十六进制来表示。如果使用 -Ad，意思就是用十进制来显示地址;</span>
<span class="token comment"># -t -x1: 显示字节码内容的时候，使用十六进制(x)，每次显示一个字节(1);</span>
<span class="token comment"># -N 52：只需要读取 52 个字节;</span>
$ od <span class="token parameter variable">-Ax</span> <span class="token parameter variable">-t</span> x1 <span class="token parameter variable">-N</span> <span class="token number">52</span> calc.o <span class="token comment"># 读取字节码</span>
000000 7f <span class="token number">45</span> 4c <span class="token number">46</span> 02 01 01 00 00 00 00 00 00 00 00 00
000010 01 00 3e 00 01 00 00 00 00 00 00 00 00 00 00 00
000020 00 00 00 00 00 00 00 00 <span class="token number">30</span> 03 00 00 00 00 00 00
000030 00 00 00 00
000034
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="todo-重定位节" tabindex="-1"><a class="header-anchor" href="#todo-重定位节" aria-hidden="true">#</a> todo 重定位节</h4><p>重定位节（Relocation Section）是DLL文件的一个特殊节，用于存储在加载和链接过程中需要修改的地址偏移量信息。它记录了DLL中涉及到的符号（如函数、变量）的地址，以便在运行时进行重定位，使得DLL可以正确加载和运行。</p><h4 id="todo-重定位表" tabindex="-1"><a class="header-anchor" href="#todo-重定位表" aria-hidden="true">#</a> todo 重定位表</h4><p>重定位表（Relocation Table）是重定位节中的一部分，它包含了需要重定位的地址和偏移量信息。重定位表的作用是指导系统在加载DLL时，根据其中的重定位信息，动态修正代码和数据的地址，以适应当前的加载地址。</p><h3 id="动态链接-pic-原理" tabindex="-1"><a class="header-anchor" href="#动态链接-pic-原理" aria-hidden="true">#</a> 动态链接 PIC 原理</h3><h4 id="fpic" tabindex="-1"><a class="header-anchor" href="#fpic" aria-hidden="true">#</a> -fpic</h4><p>位置无关码 <code>-fpic</code></p><p>回顾 gcc 编译过程： 首先把源代码编译成目标文件， 然后把目标文件链接起来。</p><p><strong><code>-fPIC</code></strong></p><p>如果是动态链接库的话，目标文件需要创建成 PIC（position-independent code，位置无关码） ，概念上就是在可执行程序装载它们的时候， 它们可以放在可执行程序的内存里的任何地方。要生成这种形式的目标文件，就需要添加参数 <code>-fPIC</code>。</p><ul><li>-fpic —— 在动态库中生成位置无关的代码。通过全局偏移表（GOT）访问所有常量地址。程序启动时动态加载程序解析GOT条目。对GOT的大小有限制。</li><li>-fPIC —— 作用同-fpic。但是对GOT表大小无限制。 即： 如果链接的可执行文件的GOT大小超过计算机特定的最大大小，则会从链接器收到错误消息，指示-fpic不起作用。在这种情况下，需要使用-fPIC重新编译。 💡为了兼容各个系统，在生成位置无关的代码的时候，应该使用-fPIC参数。</li></ul><p><strong><code>-DPIC</code></strong></p>`,22),_={href:"https://gcc.gnu.org/legacy-ml/gcc-help/2006-10/msg00147.html",target:"_blank",rel:"noopener noreferrer"},k=l('<h4 id="got-plt" tabindex="-1"><a class="header-anchor" href="#got-plt" aria-hidden="true">#</a> GOT/PLT</h4><p>载入时重定位的描述：</p><p>在调用动态库中的函数时，动态加载器动态分配一段进程地址空间，将动态库加载到该地址空间后，再修改代码段的符号地址。 至于需要修改的哪些地址，链接器在动态库的文件头中预先写好，供加载器读取修改。</p><p>载入时重定位的缺点：</p><ol><li>动态库的代码段不能在进程间共享： 多个进程加载同一个动态库到各自不同的地址空间，导致代码段需要不同的重定位，所以最终每个引用该动态库的进程拥有一份该动态库代码段的不同拷贝。</li><li>代码段必须是可写的，增加了被攻击风险。</li></ol><p>为了解决载入时重定位的问题，引入了PIC的概念，即位置无关代码。</p><p><strong>PIC实现原理</strong></p><ol><li><strong>GOT</strong>： 在动态库的数据段增加 GOT（Global Offset Table），该表的每一项是符号到地址的绝对映射。 由于代码段到数据段的偏移是固定的，因此可以在编译时确定代码段中的某个符号到GOT特定项之间的偏移。 这样，代码段中的符号偏移就可以在编译时确定了，在加载时也无需修改代码段的内容，只需要填写位于数据段的GOT的所有项的符号的绝对地址就完成了。 因为数据段本来就是进程间不共享，每个进程独立的一份，因此GOT的设计完全解决了以上两个问题，从而达到两个目的： 1，代码段可以在多进程间共享； 2，代码段是只读的。</li><li><strong>PLT</strong>： PLT（Program Linkage Table，程序链接表） 的出现是为了延时定位的目的。 一个动态库中的函数往往要远多于全局变量，并且被调用的函数往往少于定义的函数。 由于 GOT 中包含了该动态库中的所有的全局变量的映射，并且在连接器加载时解析所有的全局变量的地址。 如果用同样的方式去处理函数调用符号，则开销会非常大。 因此在代码段设计了一个 PLT （表中每一项其实是个代码段） 用于执行如下逻辑： 首次访问时，解析参数和向GOT填写函数地址，后续访问直接访问 GOT 中的函数地址。 如此达到了延时定位的目的。</li></ol><p>因此，在一个 PIC 的动态库中， 对全局变量使用 GOT 来映射， 对函数调用使用 PLT + GOT 来映射。 从而达到共享库代码段复用，代码段安全访问的目的。 而这些就是 PIC 的意义。</p><h3 id="分析程序字节码" tabindex="-1"><a class="header-anchor" href="#分析程序字节码" aria-hidden="true">#</a> 分析程序字节码</h3><p>todo <code>od -Ad -t x1 -j 1136 -N 434 main</code></p><p>todo 反汇编 <code>objdump -d main.o</code></p><h2 id="编译选项" tabindex="-1"><a class="header-anchor" href="#编译选项" aria-hidden="true">#</a> 编译选项</h2><h3 id="安全编译-链接选项" tabindex="-1"><a class="header-anchor" href="#安全编译-链接选项" aria-hidden="true">#</a> 安全编译/链接选项</h3>',14),x={href:"https://www.jianshu.com/p/91fae054f922",target:"_blank",rel:"noopener noreferrer"},g=l("<p>若不加上，可能运行时会泄露某些信息，方便逆向、CTF。</p><table><thead><tr><th> </th><th>编译选项</th><th>链接选项</th></tr></thead><tbody><tr><td>必选</td><td>PIC/PIE/Protect-Stack</td><td>rpath/Bind-Now/Strip</td></tr><tr><td>可选</td><td>Fortify-Source/ftrapv</td><td></td></tr></tbody></table><p>具体含义</p>",3),y=n("thead",null,[n("tr",null,[n("th",null,"编译/链接选项"),n("th",null,"必选"),n("th",null,"含义"),n("th",null,"使用方法")])],-1),L=n("tr",null,[n("td",null,[e("PIC"),n("br"),e("（Position-Independent-Code）")]),n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high")])]),n("td",null,[e("位置无关代码 "),n("br"),e(" 实现动态库随机加载")]),n("td",null,[n("code",null,"-fPIC"),e("/"),n("s",null,[n("code",null,"-fpic"),e("（旧）")]),e(" （编译选项）")])],-1),E=n("tr",null,[n("td",null,[e("PIE(ASLR)"),n("br"),e("PIE"),n("br"),e("（Position-Independent-Executable）")]),n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high ")])]),n("td",null,[e("位置无关代码/随机化"),n("br"),e("可执行文件在加载执行时可像共享库一样随机加载 "),n("br"),e(" 降低固定地址类攻击、缓冲溢出攻击的成功率")]),n("td",null,[n("code",null,"-fPIE"),e("/"),n("s",null,[n("code",null,"-fpie"),e("（旧）")]),e(" （编译选项） "),n("br"),e(),n("code",null,"-pie"),e(" （链接选项） "),n("br"),e(" ⚠️需要上述两个选项同时使用 "),n("br"),e(" 解释： "),n("ul",null,[n("li",null,[n("code",null,"-no-pie"),e(": 关闭")]),n("li",null,[n("code",null,"-pie"),e(": 开启")])])])],-1),O=n("td",null,[e("Canary"),n("br"),e("Protect-Stack"),n("br"),e("SP")],-1),C=n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high")])],-1),T=n("br",null,null,-1),R={href:"https://www.cnblogs.com/arnoldlu/p/11630979.html",target:"_blank",rel:"noopener noreferrer"},S=n("td",null,[n("code",null,"-fstack-protector-strong"),e("/"),n("s",null,[n("code",null,"-fstack-protector-all"),e("（旧）")]),e(" （编译选项） "),n("br"),e(" 解释： "),n("ul",null,[n("li",null,[n("code",null,"-fno-stack-protector"),e(": 关闭")]),n("li",null,[n("code",null,"-fstack-protector"),e(": 开启")]),n("li",null,[n("code",null,"-fstack-protector-all"),e(": 全开启")])])],-1),w=n("td",null,[e("Fortify"),n("br"),e("Fortify-Source"),n("br"),e("FS")],-1),P=n("td",null,[n("span",{class:"level-2"},[e("可选"),n("br"),e("medium")])],-1),I=n("br",null,null,-1),F=n("br",null,null,-1),A={href:"https://forum.butian.net/share/1190",target:"_blank",rel:"noopener noreferrer"},N=n("br",null,null,-1),D=n("span",{style:{}},[e("Fority 其实非常轻微的检查，用于检查是否存在缓冲区溢出的错误。"),n("br"),e("Fortify 是GCC在编译源码时判断程序的哪些buffer会存在可能的溢出。"),n("br"),e("在buffer大小已知的情况下，GCC会把 strcpy、memcpy、memset等函数自动替换成相应的"),n("code",null,"__strcpy_chk(dst, src, dstlen)"),e("等函数，达到防止缓冲区溢出的作用。")],-1),G=n("td",null,[n("code",null,"-O2"),e(" （编译选项） "),n("br"),e(),n("code",null,"-D_FORTIFY_SOURCE=2"),e(" （编译选项，默认开启，但需要"),n("code",null,"-O2"),e("启动时才会激活）")],-1),z=n("tr",null,[n("td",null,"ftrapv"),n("td",null,[n("span",{class:"level-2"},[e("可选"),n("br"),e("medium")])]),n("td",null,[e("整数溢出检查 "),n("br"),e(" 使用了它之后，在执行有符号整数间的加减乘运算时，不是通过CPU的指令，而是用包含了GCC附属库的libgcc.c里面的函数来实现执行带符号的整数间的加/减/乘/除运算。 "),n("br"),e(),n("span",{sytle:"background:yellow"},"对性能影响比较大。")]),n("td",null,[n("code",null,"-ftrapv"),e(" （编译选项）")])],-1),U=n("tr",null,[n("td",null,"NX(DEP)"),n("td",null,[n("span",{class:"level-1"},[e("可选"),n("br"),e("high")])]),n("td",null,"堆栈不可执行"),n("td",null,[n("code",null,"-z noexecstack"),e(),n("br"),e(" 解释： "),n("ul",null,[n("li",null,[n("code",null,"-z execstack"),e(": 关闭")]),n("li",null,[n("code",null,"-z noexecstack"),e(": 开启")])])])],-1),B=n("tr",null,[n("td",null,"rpath"),n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high")])]),n("td",null,[e("禁用： “动态库搜索路径” "),n("br"),e(" 禁用： "),n("code",null,"-rpath"),e(),n("br"),e(" 二进制特征会显示rpath/runpath路径。攻击者更加容易构造rpath类的攻击 "),n("br"),e(),n("s",null,[e("指定运行时避免使用链接器 "),n("code",null,"-Wl,-rpath=."),e(" 寻找动态库的路径")])]),n("td",null,[n("code",null,"set(CMAKE_SKIP_RPATH TRUE)"),e(" （Cmake）")])],-1),V=n("tr",null,[n("td",null,"Bind-Now"),n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high")])]),n("td",null,"立即绑定"),n("td",null,[n("code",null,"-Wl,-z,now"),e(" （链接选项） "),n("br"),e(" 或："),n("code",null,"LD_BIND_NOW=1")])],-1),W=n("tr",null,[n("td",null,"RELRO"),n("td",null,[n("span",{class:"level-1"},[e("必选"),n("br"),e("high")])]),n("td",null,[e("GOT表保护"),n("br"),e("全部重定向只读保护，防止内存越界，一旦越界就会segmentation faul。"),n("br"),e("对ret2plt攻击进行防护")]),n("td",null,[n("code",null,"-Wl,-z,relro"),e(" （链接选项） "),n("br"),e(" 解释："),n("ul",null,[n("li",null,[n("code",null,"-z norelro"),e(": 关闭")]),n("li",null,[n("code",null,"-z lazy"),e(": 部分开启")]),n("li",null,[n("code",null,"-z now"),e(": 完全开启")])])])],-1),M=n("tr",null,[n("td",null,"Strip"),n("td",null,[n("span",{class:"level-2"},[e("必选"),n("br"),e("medium ")])]),n("td",null,[e("去除符号表：链接过程完成后，符号表对可执行文件运行已无任何作用，反而会成为攻击者构造攻击的工具。"),n("br"),e("同时，删除符号表还可以对文件“减肥”，降低文件大小")]),n("td",null,[n("code",null,"-Wl,-s"),e(" （链接选项）")])],-1),j=n("h3",{id:"安全编译选项检测工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安全编译选项检测工具","aria-hidden":"true"},"#"),e(" 安全编译选项检测工具")],-1),Y=n("h4",{id:"binscope-todo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#binscope-todo","aria-hidden":"true"},"#"),e(" binscope todo")],-1),$=n("p",null,"参考：",-1),H={href:"https://zhuanlan.zhihu.com/p/624647089",target:"_blank",rel:"noopener noreferrer"},q={href:"https://www.microsoft.com/en-us/download/details.aspx?id=44995",target:"_blank",rel:"noopener noreferrer"},X={href:"https://docs.microsoft.com/en-us/cpp/build/reference/compiling-a-c-cpp-program?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},K={href:"https://docs.microsoft.com/en-us/cpp/build/reference/linking?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://blog.csdn.net/sunweiliang/article/details/89338099",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/john_crash/article/details/50127309",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://docs.microsoft.com/en-us/cpp/security/security-best-practices-for-cpp?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://docs.microsoft.com/en-us/cpp/c-runtime-library/security-features-in-the-crt?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},en={href:"https://docs.microsoft.com/en-us/cpp/standard-library/iterator-debug-level?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://docs.microsoft.com/en-us/cpp/standard-library/checked-iterators?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},an={href:"https://docs.microsoft.com/en-us/cpp/code-quality/code-analysis-for-c-cpp-overview?view=msvc-170",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://www.microsoft.com/en-us/download/details.aspx?id=44995",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://github.com/andrew-d/binscope",target:"_blank",rel:"noopener noreferrer"},rn={href:"https://gitee.com/dangoxj/secbinarycheck-result-analyzer",target:"_blank",rel:"noopener noreferrer"};function dn(cn,on){const t=i("RouterLink"),a=i("ExternalLinkIcon");return d(),c("div",null,[p,n("p",null,[e("cmake: "),s(t,{to:"/dev/c/cmake.html"},{default:o(()=>[e("link")]),_:1})]),b,n("details",v,[m,n("ul",null,[n("li",null,[e("Linux系统中编译、链接的基石-ELF文件：扒开它的层层外衣，从字节码的粒度来探索 - "),n("a",h,[e("https://mp.weixin.qq.com/s/ZOvHG_ofiU6iWtoSR9bFow"),s(a)])])])]),f,n("p",null,[e("根据 "),n("a",_,[e("Re: What does -DPIC linker flag mean"),s(a)]),e(" 提到： todo")]),k,n("p",null,[e("todo linux程序保护机制&gcc编译选项 - "),n("a",x,[e("https://www.jianshu.com/p/91fae054f922"),s(a)])]),g,n("table",null,[y,n("tbody",null,[L,E,n("tr",null,[O,C,n("td",null,[e("栈保护。可以判断是否发生溢出攻击 "),T,e(" 参考： "),n("a",R,[e("https://www.cnblogs.com/arnoldlu/p/11630979.html"),s(a)])]),S]),n("tr",null,[w,P,n("td",null,[e("GCC编译器和glibc库配合提供在编译时和运行时对固定大小的缓冲区的访问 "),I,e(" （无论时动态分配的还是静态声明的内存空间） "),F,e(" 参考： "),n("a",A,[e("https://forum.butian.net/share/1190"),s(a)]),e(),N,e(),D]),G]),z,U,B,V,W,M])]),j,Y,$,n("ul",null,[n("li",null,[e("todo binscope说明 - Windows平台MSVC的安全编译选项检测工具 "),n("a",H,[e("https://zhuanlan.zhihu.com/p/624647089"),s(a)]),n("ul",null,[n("li",null,[e("todo "),n("a",q,[e("binscope"),s(a)])]),n("li",null,[e("todo "),n("a",X,[e("官方文档 编译器选项"),s(a)])]),n("li",null,[e("todo "),n("a",K,[e("官方文档 链接器选项"),s(a)])]),n("li",null,[e("todo "),n("a",Z,[e("MSVC编译参数"),s(a)])]),n("li",null,[e("todo "),n("a",J,[e("MSVC编译参数"),s(a)])]),n("li",null,[e("todo "),n("a",Q,[e("Security Best Practices for C++"),s(a)])]),n("li",null,[e("todo "),n("a",nn,[e("Security Features in the CRT"),s(a)])]),n("li",null,[e("todo "),n("a",en,[e("_ITERATOR_DEBUG_LEVEL"),s(a)])]),n("li",null,[e("todo "),n("a",sn,[e("Checked Iterators"),s(a)])]),n("li",null,[e("todo "),n("a",an,[e("Code analysis for C/C++ overview"),s(a)])])])]),n("li",null,[e("todo BinScope 2014 "),n("a",ln,[e("https://www.microsoft.com/en-us/download/details.aspx?id=44995"),s(a)])]),n("li",null,[e("todo binscope github "),n("a",tn,[e("https://github.com/andrew-d/binscope"),s(a)])]),n("li",null,[e("todo SecBinaryCheck ResultAnalyzer "),n("a",rn,[e("https://gitee.com/dangoxj/secbinarycheck-result-analyzer"),s(a)])])])])}const pn=r(u,[["render",dn],["__file","build.html.vue"]]);export{pn as default};
