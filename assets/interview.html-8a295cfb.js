import{_ as p,r as o,o as c,c as l,a as n,b as a,d as t,e}from"./app-04e6f892.js";const i={},u=n("p",null,"参考：",-1),r={href:"https://www.bilibili.com/video/BV1Av4y187hf/?p=2",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.bilibili.com/video/BV1Ad4y1H7VA/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.bilibili.com/video/BV1v44y117K9/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.bilibili.com/video/BV1EN411g7M6",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="java基础语法" tabindex="-1"><a class="header-anchor" href="#java基础语法" aria-hidden="true">#</a> Java基础语法</h2><h3 id="两个integer比较" tabindex="-1"><a class="header-anchor" href="#两个integer比较" aria-hidden="true">#</a> 两个Integer比较</h3><p>两个对象比较用 equals</p><p>之所以有使用用 <code>==</code> 符合预期，是因为享元模式在128前的数据统一做了缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
a <span class="token operator">==</span> b <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
a <span class="token operator">==</span> b <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string创建对象数" tabindex="-1"><a class="header-anchor" href="#string创建对象数" aria-hidden="true">#</a> String创建对象数</h3><p><code>new String(&quot;abc&quot;)</code> 创建了多少个对象？</p><ol><li><code>new</code> 关键字在堆中创建 String 对象</li><li>传入 <code>&quot;abc&quot;</code> 字符串，这会在 String 对象中存储为常量 <ol><li>看字符串常量池</li><li>没有就往常量池中添加字符串对象</li><li>有就直接取对象引用</li></ol></li></ol><p>答： 1 ~ 2 个。常量池有该字符串1个；否则2个。</p><h3 id="finally-必须执行" tabindex="-1"><a class="header-anchor" href="#finally-必须执行" aria-hidden="true">#</a> finally 必须执行？</h3><p>两种情况不执行</p><ol><li>没try住</li><li><code>System.exit(0)</code></li></ol><h3 id="volatile" tabindex="-1"><a class="header-anchor" href="#volatile" aria-hidden="true">#</a> volatile</h3><p>volatile能保证线程安全吗？不能，不具有原子性。主要功能是保证变量值的可见性（修改了马上可见）和禁止指令重排序（修改不被忽略，如i++;i--;i++不被优化为i++，在小灯闪烁的场景可能有用） https://www.bilibili.com/video/BV1t14y1B76w/</p><h3 id="为什么jdk动态代理只能代理有接口的类" tabindex="-1"><a class="header-anchor" href="#为什么jdk动态代理只能代理有接口的类" aria-hidden="true">#</a> 为什么JDK动态代理只能代理有接口的类</h3><p>JDK动态代理机制决定的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyExample</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 让代理对象的class文件写入到磁盘</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sum.misc.ProxyGenerator.saveGeneratedFiles&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IHelloService</span> helloService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IHelloService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
      <span class="token class-name">IHelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">IHelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>proxy<span class="token punctuation">,</span>method<span class="token punctuation">,</span>args1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;动态代理执行的逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloService<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里生成的代理类会继承 Proxy 类。而因为 Java 是单继承的，所以代理的对象只能设计成接口实现了。</p><h3 id="stringbuffer和stringbuilder区别" tabindex="-1"><a class="header-anchor" href="#stringbuffer和stringbuilder区别" aria-hidden="true">#</a> StringBuffer和StringBuilder区别</h3><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>String 
private final char value[];
最慢 —— final，所以每次更改都new新对象

StringBuffer
char[] value // 可变
线程安全 —— 方法上有synchronized锁
运行慢

StringBuilder
char[] value // 
线程不安全
运行快
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="线上项目突发oom-如何快速定位oom问题" tabindex="-1"><a class="header-anchor" href="#线上项目突发oom-如何快速定位oom问题" aria-hidden="true">#</a> 线上项目突发OOM ？如何快速定位OOM问题 ？</h3><p>https://www.bilibili.com/video/BV1Wu4y1c7N5/</p><h4 id="出现oom的可能原因" tabindex="-1"><a class="header-anchor" href="#出现oom的可能原因" aria-hidden="true">#</a> 出现OOM的可能原因</h4><p>出现OOM可能的原因有：</p><ol><li>查询一次查太多（全表），一次创建太多对象，申请太多堆内存 —— 解决：减少申请对象的数量，如分页</li><li>内存资源耗尽，没有释放，如jdbcconnection没有释放 —— 解决：资源用完马上释放；使用池化思想（最多申请固定数量的资源，重复使用，超过的需求就排队等待）</li><li>堆内存分配不够日常大对象的开销 —— <code>jmap --heap</code>查看堆信息</li></ol><h4 id="定位oom的问题" tabindex="-1"><a class="header-anchor" href="#定位oom的问题" aria-hidden="true">#</a> 定位OOM的问题</h4><ul><li><p>如果系统已经OOM挂了 —— 启动时设置<code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=</code>，当出现OOM后，会dump一份堆信息到指定目录，分析OOM具体代码位置。（用Java VisualVM分析）</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>如果设置了上述参数，那么就要确保系统的硬盘空间足够。因为该参数会记录系统的整个运行过程中的所有对象信息，非常占用硬盘空间的！也就说导出时，文件可能会非常大！</p></div></li><li><p>系统运行中未OOM（比如，收到频繁fullgc告警、cpu load飙高告警） —— 导出dump文件：<code>jmap -dump:format=b,file=xxx.hprof 14660</code>/<code>jps; jmap -histo:live 24286</code>。然后使用<code>Arthas</code>工具进行调试。</p></li><li><p>结合jvisualvm进行调试 —— 查看最多跟业务有关的对象，找到GCroot、查看线程栈</p></li></ul><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h2><h3 id="内存模型" tabindex="-1"><a class="header-anchor" href="#内存模型" aria-hidden="true">#</a> 内存模型</h3><p><img src="https://s2.loli.net/2023/12/05/hQoC4ESOB2Hs9pl.png" alt="image.png"></p><ul><li><p>类加载</p></li><li><p>运行时数据区</p><blockquote><p>2+3+4 —— 2（堆+方法区）、3（虚拟机栈、本地方法栈、程序计数器）、4（局部变量表、操作数栈、动态链接、方法出口）</p></blockquote><ul><li>堆</li><li>方法区 <ul><li>运行时常量池</li></ul></li><li>&quot;线程&quot; <ul><li>虚拟机栈 <ul><li>&quot;栈帧&quot; <ul><li>局部变量表 —— 方法中定义的变量</li><li>操作数栈 —— 存储运算时可能的临时变量。e.g. <code>a=1,b=a+2</code>先1入栈再出栈，a在局部变量表赋值；然后a值入栈、2入栈，b在局部变量表赋值</li><li>动态链接 —— 方法外的方法，变量值，常量值</li><li>方法出口</li></ul></li></ul></li><li>本地（native）方法栈 （调用C语言方法）</li><li>程序计数器</li></ul></li></ul></li></ul><hr><ul><li>堆 <ul><li>句柄池 <ul><li>对象类型指针</li><li>对象实例数据指针</li></ul></li><li>实例对象数据</li></ul></li></ul>`,34),b={href:"https://www.bilibili.com/video/BV1Ad4y1H7VA",target:"_blank",rel:"noopener noreferrer"},h=e(`<h3 id="堆中对象结构" tabindex="-1"><a class="header-anchor" href="#堆中对象结构" aria-hidden="true">#</a> 堆中对象结构</h3><p><code>Object o = new Object();</code></p><p>通过 JOL 工具分析 Java 对象</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Mark Word 8byte
Class Pointer 8byte/4byte —— xxx.class
实例数据
对齐 —— 磁盘8byte读更快
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="mark-word" tabindex="-1"><a class="header-anchor" href="#mark-word" aria-hidden="true">#</a> Mark Word</h4><p>有：</p><ol><li>计数值</li><li>hash</li><li>锁</li></ol><h3 id="垃圾回收流程" tabindex="-1"><a class="header-anchor" href="#垃圾回收流程" aria-hidden="true">#</a> 垃圾回收流程</h3><ul><li>堆 （<code>-Xms最小堆空间</code>、<code>-Xmx最大堆空间</code>） <ul><li>新生代 （1/3） <ul><li>Eden （8/10） （<code>-Xmn新生代堆大小</code>）</li><li>From （1/10）</li><li>To （1/10）</li></ul><blockquote><p>说明：</p><ol><li>mirrorGC —— Eden满了，将要的类移动到From/To区，计数加1</li></ol></blockquote></li><li>老年代 （2/3） <blockquote><p>说明：</p><ol><li>新生代From/To中对象计数15后放入老年代 （15值可调节 <code>-XX:MaxTenuringThreshold</code>）</li><li>老年代满了，触发FullGC</li></ol></blockquote></li></ul></li></ul><h3 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法" aria-hidden="true">#</a> 垃圾回收算法</h3><h4 id="标记-清除算法" tabindex="-1"><a class="header-anchor" href="#标记-清除算法" aria-hidden="true">#</a> 标记-清除算法</h4><ol><li>标记可达对象 <ul><li>存活 <ul><li>可达性 —— 从gcRoot开始找，可达</li><li>计数器 —— 可能有循环引用问题</li></ul></li></ul></li><li>清理</li></ol><p>缺点</p><ol><li>效率低</li><li>碎片化</li><li>大内存没法搞</li></ol><p><img src="https://s2.loli.net/2023/12/06/1FXTQqgyVlSbCzx.png" alt="image.png"></p><h4 id="复制算法" tabindex="-1"><a class="header-anchor" href="#复制算法" aria-hidden="true">#</a> 复制算法</h4><p>缺点</p><ol><li>存活对象多，效率低</li><li>浪费（一半）内存</li></ol><p><img src="https://s2.loli.net/2023/12/06/694GbOlXaDrZ75P.png" alt="image.png"></p><h4 id="标记整理算法" tabindex="-1"><a class="header-anchor" href="#标记整理算法" aria-hidden="true">#</a> 标记整理算法</h4><p>缺点</p><ol><li>效率问题 —— 因为要频繁修改引用</li></ol><h4 id="分代搜集算法" tabindex="-1"><a class="header-anchor" href="#分代搜集算法" aria-hidden="true">#</a> 分代搜集算法</h4><p>对于年轻代，整理频繁，使用复制算法</p><p>对于老年代，整理频率小，使用标记清除算法或标记整理算法均可</p><h3 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器" aria-hidden="true">#</a> 垃圾回收器</h3><p>发展图</p><p><img src="https://s2.loli.net/2023/12/06/D2FVPmSQ3k86TwJ.png" alt="image.png"></p><h4 id="serial" tabindex="-1"><a class="header-anchor" href="#serial" aria-hidden="true">#</a> Serial</h4><p>新生代算法 Serial，复制算法，单线程 —— stop the world</p><p>老年代算法 Serial old，</p><h4 id="parallel" tabindex="-1"><a class="header-anchor" href="#parallel" aria-hidden="true">#</a> Parallel</h4><p>同Serial，只是单线程变成了多线程。</p><h4 id="cms" tabindex="-1"><a class="header-anchor" href="#cms" aria-hidden="true">#</a> cms</h4><p>初始标记，标记GCroot</p><p>并发标记、重新标记（stw）</p><p>并发清除</p><h4 id="g1" tabindex="-1"><a class="header-anchor" href="#g1" aria-hidden="true">#</a> G1</h4><p>将堆分成多个region块</p><p><img src="https://s2.loli.net/2023/12/06/yqAPnYKxZofdjVB.png" alt="image.png"></p><p>主要四个类型的region</p><ul><li>old —— 老年代</li><li>eden —— 新生代</li><li>survivor —— 存活</li><li>humongous —— 大对象</li></ul><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>整体： 标记整理算法
局部： 复制算法
关注停顿时间，实现高的吞吐量
young GC、old GC
吞吐量降低
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四种引用" tabindex="-1"><a class="header-anchor" href="#四种引用" aria-hidden="true">#</a> 四种引用</h3><h4 id="强引用" tabindex="-1"><a class="header-anchor" href="#强引用" aria-hidden="true">#</a> 强引用</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>GC 不回收，就算 oom</p><h4 id="软引用" tabindex="-1"><a class="header-anchor" href="#软引用" aria-hidden="true">#</a> 软引用</h4><p>看空间足够，不回收</p><p>空间不足，回收</p><p>应用：</p><ol><li>缓存，图片编辑器</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// heap -Xms10m -Xmx10m</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1M</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> softReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>softReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;list.add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;长度：&quot;</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-------- 软引用被回收 -------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>poll <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poll<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>poll<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poll <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="弱引用" tabindex="-1"><a class="header-anchor" href="#弱引用" aria-hidden="true">#</a> 弱引用</h4><p>gc看到，马上回收</p><p>应用：</p><ol><li>WeakHashMap</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// heap -Xms10m -Xmx10m</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Obj</span> <span class="token punctuation">{</span>
  <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1M</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Obj</span><span class="token punctuation">&gt;</span></span> weakReference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weakReference<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="虚引用" tabindex="-1"><a class="header-anchor" href="#虚引用" aria-hidden="true">#</a> 虚引用</h4><p>相当于没有</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ReferenceQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PhantomReference</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unsafe类-todo" tabindex="-1"><a class="header-anchor" href="#unsafe类-todo" aria-hidden="true">#</a> Unsafe类 todo</h3><p>通过 Unsafe类可以间接操作内存 —— 一般用于研究，不在生产使用！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>todo</p><h2 id="调试工具" tabindex="-1"><a class="header-anchor" href="#调试工具" aria-hidden="true">#</a> 调试工具</h2><h3 id="jps" tabindex="-1"><a class="header-anchor" href="#jps" aria-hidden="true">#</a> jps</h3><p>查看java进程状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps
jps <span class="token parameter variable">-q</span>
jps <span class="token parameter variable">-l</span>
jps <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jstat" tabindex="-1"><a class="header-anchor" href="#jstat" aria-hidden="true">#</a> jstat</h3><p>查看堆内存的分布</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token parameter variable">-gc</span> <span class="token number">21572</span> <span class="token number">250</span> <span class="token number">4</span>
jstat <span class="token parameter variable">-gcutil</span> <span class="token number">21572</span>
jstat <span class="token parameter variable">-gcnew</span> <span class="token number">21572</span> <span class="token comment"># 看年轻代</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://s2.loli.net/2023/12/06/j1tPpqKVOaM4D3v.png" alt="image.png"></p><h3 id="jstack" tabindex="-1"><a class="header-anchor" href="#jstack" aria-hidden="true">#</a> jstack</h3><p>查看进程、线程的堆栈信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstack 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="jmap" tabindex="-1"><a class="header-anchor" href="#jmap" aria-hidden="true">#</a> jmap</h3><p>查看堆类</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-heap</span> <span class="token number">21572</span>
jmap <span class="token parameter variable">-dump:file</span><span class="token operator">=</span>jvmtool <span class="token number">21572</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jconsole" tabindex="-1"><a class="header-anchor" href="#jconsole" aria-hidden="true">#</a> jconsole</h3><p>JavaGui 监视和管理控制台</p><h3 id="jvisualvm" tabindex="-1"><a class="header-anchor" href="#jvisualvm" aria-hidden="true">#</a> jvisualvm</h3><p>非常好的 Java 运行时可视化工具</p><h3 id="arthas" tabindex="-1"><a class="header-anchor" href="#arthas" aria-hidden="true">#</a> Arthas</h3><p>todo</p><h2 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h2><ul><li>bootstrap ClassLoader —— <code>%JAVA_HOME%/lib</code></li><li>ExtClassLoader —— <code>%JAVA_HOME%/lib/ext</code></li><li>AppClassLoader —— classpath</li></ul><h3 id="双亲委派" tabindex="-1"><a class="header-anchor" href="#双亲委派" aria-hidden="true">#</a> 双亲委派</h3><ul><li>向上委派</li><li>向下查找</li></ul><p><img src="https://s2.loli.net/2023/12/15/lrUf8DKZYQ71R3C.png" alt="022038kx878v78z8z8l77s.png"></p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><p>Throwable</p><ul><li>Exception —— 程序异常</li><li>Error —— 程序无法处理 e.g. oom</li></ul><p>Exception</p><ul><li>RuntimeException</li><li>CheckException —— 编译不通过</li></ul><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><h3 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h3><ul><li>新建 <code>new Thread</code></li><li>可运行 runable</li><li>运行状态 running</li><li>阻塞状态 （不释放锁）</li><li>等待队列状态（释放锁）</li><li>死亡 dead</li></ul><p><img src="https://s2.loli.net/2023/12/06/NB5wRJ6u83VHMrL.png" alt="image.png"></p><h3 id="线程实现方式" tabindex="-1"><a class="header-anchor" href="#线程实现方式" aria-hidden="true">#</a> 线程实现方式</h3><ol><li><p>继承 Thread 类，重写 run 方法</p></li><li><p>实现 Runnable 接口，重写 run 方法</p></li><li><p>实现 Callable 接口，重写 call 方法，配合 FutureTask 获得返回结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Object</span> count <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 运行结果</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;总和：&quot;</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基于线程池构建线程</p></li></ol><blockquote><p>但是，上述几个方法，归根到底都是实现了 Runnable 接口。</p></blockquote><h3 id="线程池原理" tabindex="-1"><a class="header-anchor" href="#线程池原理" aria-hidden="true">#</a> 线程池原理</h3><p><code>ThreadPoolExecutor</code></p><p>new时参数： 核心线程数，最大线程数，阻塞队列，拒绝策略，非核心线程的最大存活时间，时间单位</p><p>todo https://www.bilibili.com/video/BV1Ad4y1H7VA?p=27</p><h3 id="threadlocal" tabindex="-1"><a class="header-anchor" href="#threadlocal" aria-hidden="true">#</a> ThreadLocal</h3><p>每个线程有 ThreadLocalMap 对象存 ThreadLocal。</p><h4 id="threadlocal内存泄漏问题" tabindex="-1"><a class="header-anchor" href="#threadlocal内存泄漏问题" aria-hidden="true">#</a> ThreadLocal内存泄漏问题</h4><p>如果在线程池中使用ThreadLocal会内存泄漏</p><p>因为线程池不会回收线程对象</p><p>解决： 手动调用ThreadLocal的remove方法</p><h3 id="executors创建线程缺点" tabindex="-1"><a class="header-anchor" href="#executors创建线程缺点" aria-hidden="true">#</a> Executors创建线程缺点</h3><p>因为Executors中使用<code>new LinkedBlockingQueue&lt;Runnable&gt;()</code>作为阻塞队列，但这个队列上限非常大！通常资源满了，队列可能都未满。</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>newSingleThreadExecutor —— 单个工作线程来执行任务，如果这个线程异常结束，就会有一个新的来替代它
newFixedThreadPool —— 固定长度的线程池
newCachedThreadPool —— 一个可缓存的线程池，线程池的规模超过了处理需求，将自动回收空闲线程
newScheduledThreadPool —— 创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="synchronized使用" tabindex="-1"><a class="header-anchor" href="#synchronized使用" aria-hidden="true">#</a> synchronized使用</h3><p>问题 count</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> voic <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedExecption</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">SynTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="synchronized升级" tabindex="-1"><a class="header-anchor" href="#synchronized升级" aria-hidden="true">#</a> Synchronized升级</h3><p>jdk1.6之前，synchronized通过重量级锁的方式实现线程之间的锁竞争。</p><p>之所以叫重量级锁，因为底层使用操作系统层面的 Mutex lock 来实现互斥锁的功能。 mutex 是系统方法，由于权限隔离的关系应用程序调用系统方法时候需要切换到内核状态来执行。这样就涉及到用户态到内核态的切换。这个切换会带来性能上的损耗。</p><p>jdk1.6之后，synchronized增加了锁升级的机制。平衡数据安全和性能的关系。</p><p>偏向锁、轻量级锁（自旋锁）</p><ol><li>synchronized优先尝试偏向锁（把当前锁偏向某个线程：通过CAS机制来修改偏向锁的标记，适合在同一个线程多次申请统一锁资源的情况，并且没有其他线程竞争的场景）</li><li>如果偏向锁竞争失败，说明已有其他线程占用锁。需要升级到轻量级锁。轻量级锁也叫自旋锁（通过多次自旋去重试竞争锁，优点是避免了用户态到内核态的的切换）</li><li>如果轻量级锁仍然无法占用锁，只能升级到重量级锁。在重量级锁的情况下，没有竞争到锁的线程会被阻塞，线程状态为blocked（锁等待）的状态，这个状态需要等待占用锁的线程释放锁后触发唤醒</li></ol><p><img src="https://s2.loli.net/2023/12/07/D2gnOx4QWuFcKzE.png" alt="image.png"></p><h3 id="lock锁" tabindex="-1"><a class="header-anchor" href="#lock锁" aria-hidden="true">#</a> Lock锁</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="不公平锁和公平锁" tabindex="-1"><a class="header-anchor" href="#不公平锁和公平锁" aria-hidden="true">#</a> 不公平锁和公平锁</h4><p>构造时默认用不公平锁</p><p>不公平锁： cpu时间给到谁，谁开搞！ （默认）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不公平</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>公平锁： 排队执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="synchronized和lock区别" tabindex="-1"><a class="header-anchor" href="#synchronized和lock区别" aria-hidden="true">#</a> Synchronized和lock区别</h3><p>相同</p><ol><li>独占锁</li><li>可重入锁</li></ol><p>不同</p><ol><li><p>Synchronized 是关键字，lock 是接口 ReentrantLock 实现读写锁</p></li><li><p>Synchronized 自动释放，lock 手动释放 死锁</p></li><li><p>Synchronized 多线程访问会一直等待， lock 可以处理其他业务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>tryLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 释放锁</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Synchronized 不可以中断，不公平锁 lock可以设置 <code>lock.lockInterruptibl()</code></p></li><li><p>Synchronized 尽量放少量代码， lock 可以放大量代码中</p></li></ol><h3 id="cas机制" tabindex="-1"><a class="header-anchor" href="#cas机制" aria-hidden="true">#</a> CAS机制</h3><p>Compare And Swap</p><p>CAS 无锁同步机制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
atomicInteger
atomicInteger
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>compareAndSwapInt

V 需要更新的变量 主内存中
E 预期值 工作内存中
N 新值

先读V值，再读一遍，如果相等V=E，则N更新，否则不操作（更新失败）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：</p><ol><li>开销大（循环）， <ul><li>处理： 轻量级锁升级为重量级锁，</li></ul></li><li>ABA问题 <ul><li>处理： 乐观锁 —— 加版本号</li></ul></li></ol><h3 id="aqs组件" tabindex="-1"><a class="header-anchor" href="#aqs组件" aria-hidden="true">#</a> AQS组件</h3><p>AQS （Abstract Queued Synchronizer，多线程同步器） 是并发编程中比较核心的一个组件，是JUC包中多个组件的底层实现，如Lock、CountDownLatch、Semaphore。</p><p>AQS提供了两种锁：排他锁和共享锁</p><ul><li>排他锁 —— 多个线程竞争同一个共享资源，同一时刻只允许一个线程访问共享资源。如Lock中的ReentrantLock重入锁</li><li>共享锁 —— 读锁，如CountDownLatch、Semaphore</li></ul><p>互斥锁考虑：</p><ol><li>互斥变量的设计 <ul><li>aqs采用int类型变量state记录锁竞争的状态 0=没人竞争 大于等于1表示有线程持有锁资源。</li></ul></li><li>多线程同时更新时，线程安全性 <ul><li>多线程同时抢锁时用了cas机制保证更新的原子性。未得到锁的用unsafe中的park方法阻塞。阻塞的线程按先进先出原则加入到双向链表中，当资源释放锁后会唤醒链表头部下一个等待的线程。</li></ul></li><li>锁等待和唤醒</li><li>锁竞争的公平性和非公平性</li></ol>`,151),g={href:"https://www.bilibili.com/video/BV1Rm4y1R7Px/",target:"_blank",rel:"noopener noreferrer"},f=e(`<h2 id="web" tabindex="-1"><a class="header-anchor" href="#web" aria-hidden="true">#</a> Web</h2><h3 id="csrf" tabindex="-1"><a class="header-anchor" href="#csrf" aria-hidden="true">#</a> CSRF</h3><p>todo</p><h3 id="cors" tabindex="-1"><a class="header-anchor" href="#cors" aria-hidden="true">#</a> CORS</h3><p>跨域，除非服务器开启了跨域</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Access-Control-Allow-Origin: *
Origin: https://bilibili.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>简单请求/非简单请求</p><ul><li><p>简单请求 —— 浏览器直接发起请求</p></li><li><p>非简单请求 —— 浏览器发送option请求询问服务器允许的域，允许才发请求</p><blockquote><p>通过非简单请求的预检机制可以降低服务器的负载，对于需要占用服务器较多资源的请求最好设计为非简单请求。最常见的如DELETE、PUT常见操作。</p></blockquote></li></ul><h4 id="解决跨域" tabindex="-1"><a class="header-anchor" href="#解决跨域" aria-hidden="true">#</a> 解决跨域</h4><p>方案一： 反向代理</p><p>方案二： 修改服务器配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许特定域名</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GET, POST, PUT, DELETE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Content-Type, Authorization&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方案三： jsoup —— 只能get</p><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证" aria-hidden="true">#</a> 认证</h2><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><h3 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt" aria-hidden="true">#</a> jwt</h3><p>传递非敏感信息</p><ul><li>jws java web signature 只对内容做签名</li><li>jwe java web encryption 对内容本身加密</li></ul><h3 id="api-key" tabindex="-1"><a class="header-anchor" href="#api-key" aria-hidden="true">#</a> api key</h3><p>非对称加密</p><ul><li>accesskey 公钥</li><li>secretkey 私钥</li></ul><h2 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务" aria-hidden="true">#</a> 定时任务</h2><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h3><p>小顶堆 下沉、上浮</p><h3 id="quartz" tabindex="-1"><a class="header-anchor" href="#quartz" aria-hidden="true">#</a> Quartz</h3><h3 id="一个定时任务-执行周期很长-如何启停" tabindex="-1"><a class="header-anchor" href="#一个定时任务-执行周期很长-如何启停" aria-hidden="true">#</a> 一个定时任务，执行周期很长，如何启停</h3><p>生产环境中，经常有长周期任务，如数据分析、日志处理等。</p><p><s>并发控制、任务调度、资源管理</s></p><p>方案一： 全局标记 <br> 全局标记记录在环境变量或者分布式配置中心并设置为启动状态的初始值，然后在定时任务执行体中读取到这个标志，根据这个标记的执行状态来决定是否要停止。如果标记为“停止”则不启动新任务</p>`,29),y={href:"https://www.bilibili.com/video/BV1xz4y1g74P/",target:"_blank",rel:"noopener noreferrer"},w=e(`<h2 id="java好习惯" tabindex="-1"><a class="header-anchor" href="#java好习惯" aria-hidden="true">#</a> Java好习惯</h2><h3 id="返回值改变时间" tabindex="-1"><a class="header-anchor" href="#返回值改变时间" aria-hidden="true">#</a> 返回值改变时间</h3><p>找不同</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0D</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token number">0.0D</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0D</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  result <span class="token operator">+=</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后者多线程更安全</p><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><h3 id="spring中的设计模式" tabindex="-1"><a class="header-anchor" href="#spring中的设计模式" aria-hidden="true">#</a> spring中的设计模式</h3><ul><li>BeanFactory ApplicationContext 工厂模式</li><li>Bean创建的时候， 单例模式、原型模式</li><li>Aop 使用 代理模式、装饰器模式、适配器模式</li><li>时间监听器使用 观察者模式</li><li>jdbcTemplate 模板对象使用模板模式</li></ul><h3 id="ioc-di-aop" tabindex="-1"><a class="header-anchor" href="#ioc-di-aop" aria-hidden="true">#</a> ioc di aop</h3><p>ioc 控制反转</p><p>di 依赖注入</p><p>aop 面向切面编程</p><ul><li>Before</li><li>After</li><li>Around</li><li>AfterReturning</li><li>AfterThrowing</li></ul><h4 id="ioc加载过程" tabindex="-1"><a class="header-anchor" href="#ioc加载过程" aria-hidden="true">#</a> ioc加载过程</h4><p><code>new ApplicationContext()</code> spring 上下文时开始 ioc 加载 —— bean 的创建过程</p><p>Bean初始化过程的几种形态</p><ul><li><p>概念态</p><p><code>@Bean</code>/<code>&lt;bean/&gt;</code>/<code>@Lazy</code></p></li><li><p>定义态</p><p><code>BeanDefinition</code> 封装 Bean 的生产指标</p></li><li><p>纯净态</p><p>二级缓存，早期暴露 Bean，循环依赖才体现纯净态的作用</p></li><li><p>成熟态</p><p><code>singletonOjects</code> 最终在应用中使用的 Bean</p></li></ul><h5 id="ioc机制" tabindex="-1"><a class="header-anchor" href="#ioc机制" aria-hidden="true">#</a> IOC机制</h5><ol><li>接口依赖、具体实现类解耦</li><li>工厂设计模式 BeanFactory</li><li>反射机制</li><li>BeanDefinition 配置 Bean 细节 （柔性工厂）</li></ol><h5 id="具体ioc容器的加载过程" tabindex="-1"><a class="header-anchor" href="#具体ioc容器的加载过程" aria-hidden="true">#</a> 具体IOC容器的加载过程</h5><ul><li>概念态 -- 定义态 <ol><li><strong>实例化一个ApplicationContext的对象</strong>；</li><li>调用bean工厂后置处理器完成扫描；</li><li>循环解析扫描出来的类； —— 查看类上有没有<code>@component</code>注解，由的化会实例化为BeanDefinition</li><li><strong>实例化一个BeanDefinition对象来存储解析出来的信息</strong></li><li>把实例化好的beanDefinition对象put到beanDefinitionMap中缓存起来，以便后面实例化bean；</li><li>再次调用其他bean工厂后置处理器</li></ol></li><li>定义态 -- 纯净态 <ol><li>当然spring还会干很多事，比如国际化，比如注册BeanPostProcessor等等，如果我们只关系如何实例化一个bean的话，那么这一步就是spring调用finishBeanFactoryInitialization方法来实例化单例的bean，实例化之前spring要做验证，需要遍历所有扫描出来的类，依次判断这个bean是否Lazy，是否prototype，是否abstract等等</li><li>如果验证完成spring在实例化一个bean之前需要推断构造方法，因为spring实例化对象是通过构造方法反射，故而需要知道用哪个构造方法；</li><li><strong>推断完构造方法后spring调用构造方法反射实例化一个对象</strong>；注意我这里说的是对象、对象、对象；这个时候对象已经实例化出来了，但是并不是一个完整的bean，最简单的体现是这个时候实例化出来的对象属性是没有注入，所以不是一个完整的bean；</li></ol></li><li>纯净态 -- 成熟态 <ol><li>spring处理合并后的beanDefinition</li><li>判断是否需要完成属性注入</li><li><strong>如果需要完成属性注入，则开始注入属性</strong> —— DI循环依赖问题</li></ol></li><li>初始化 <ol><li><strong>判断bean的类型回调Aware接口</strong></li><li>调用生命周期回调方法</li><li>如果需要代理完成代理</li><li>put到单例池 —— bean完成 —— 存在spring容器当中</li></ol></li></ul><h5 id="ioc过程中的扩展点" tabindex="-1"><a class="header-anchor" href="#ioc过程中的扩展点" aria-hidden="true">#</a> IOC过程中的扩展点</h5><div class="custom-container tip"><p class="custom-container-title">提示</p><p>记：</p><ol><li>注册BeanDefinition时 —— 实现后置处理器接口，注册<code>@Component</code></li><li>实例化bean时 —— Bean实现后置处理器接口</li><li>初始化时 —— Bean实现Aware接口</li><li>初始化时 —— Bean实现接口或者添加方法注解或者注册时指定，生命周期方法</li><li>销毁时 —— Bean实现接口或者添加方法注解或者注册时指定，生命周期方法</li></ol></div><ol><li><p>注册BeanDefinition时，触发invokeBeanFactoryPostProcessors方法</p><ul><li>接口 BeanDefinitionRegistryPostProcessor</li><li>接口 BeanFactoryPostProcessor</li></ul></li><li><p>加载<code>BeanPostProcessor</code>实现类：在Bean的生命周期中会调用9次Bean的后置处理器</p><p><img src="https://s2.loli.net/2023/12/12/1iKxv2IReyNzkfE.png" alt="image.png"></p></li><li><p>初始化阶段</p><ol><li><p>初始化阶段调用<code>XXXAware</code>接口的<code>SetXXXAware</code>方法</p><p><img src="https://s2.loli.net/2023/12/12/XtCdBU6wkqjO5WZ.png" alt="image.png"><img src="https://s2.loli.net/2023/12/12/ZAPcFzNiesSQtDn.png" alt="image.png"><img src="https://s2.loli.net/2023/12/12/EuMn3ZBTRlcvema.png" alt="image.png"></p></li><li><p>生命周期回调：初始化</p><ol><li>执行<code>BeanPostProcessor</code>实现类的<code>postProcessBeforeInitialization</code>方法</li><li>执行<code>@PostConstruct</code>注解修饰方法</li><li>执行<code>InitializingBean</code>实现类的<code>afterPropertiesSet</code>方法</li><li>执行<code>@Bean</code>的<code>init-method</code>属性指定的初始化方法</li><li>执行<code>BeanPostProcessor</code>实现类的<code>postProcessAfterInitialization</code>方法</li></ol><p><img src="https://s2.loli.net/2023/12/12/gTqRIZO1SEXM9fC.png" alt="image.png"></p></li></ol></li><li><p>生命周期回调：销毁阶段</p><ol><li>执行<code>@PreDestroy</code>修饰的方法</li><li>执行<code>DisposableBean</code>实现类的<code>destroy</code>方法</li><li>执行<code>@Bean</code>的<code>destroy-method</code>属性指定的销毁方法</li></ol><p><img src="https://s2.loli.net/2023/12/12/zqnwSZxDUGOI86u.png" alt="image.png"></p></li></ol><h3 id="springbean的生命周期" tabindex="-1"><a class="header-anchor" href="#springbean的生命周期" aria-hidden="true">#</a> SpringBean的生命周期</h3><ol><li><p>实例化Bean的对象</p><ul><li>applicationcontext —— 启动时调用，启动完成bean放入容器</li><li>beanfactory —— 使用时调用，直接获取bean引用</li></ul></li><li><p>设置对象的属性</p></li><li><p>检测Aware相关的接口设置相关的依赖</p><ul><li>BeanNameFactoryAware</li><li>BeanFactoryAware</li><li>ApplicationContextAware</li></ul></li></ol><p>todo</p><h3 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖" aria-hidden="true">#</a> 循环依赖</h3>`,29),x={href:"https://www.bilibili.com/video/BV1ET4y1N7Sp/",target:"_blank",rel:"noopener noreferrer"},q=e('<p>两个或多个bean相互持有对方引用会发生循环依赖，循环依赖会导致注入死循环</p><p>依赖形式</p><ol><li>A依赖B、B依赖A</li><li>A依赖B、B依赖C、C依赖A</li><li>A依赖A</li></ol><p>三级缓存： 设置三级缓存的核心思想时把bean的实例化和bean的依赖注入进行分离</p><ol><li>getBean优先找一级缓存</li><li>如果没有就找二级缓存</li><li>如果一级、二级没有，意味bean未实例化，spring会去实例化这个bean <ol><li>反射创建一个未装配好的“早期bean”放入二级缓存</li><li>同时加入标记，标记是否有循环依赖 <ol><li>如果有标记则在下一次轮询时做依赖注入，注入完成后移到一级缓存</li></ol></li></ol></li></ol><div class="custom-container tip"><p class="custom-container-title">提示</p><ul><li>一级缓存 singletonObjects —— 完全初始化好的bean：已完成依赖注入</li><li>二级缓存 earlySingletonObjects —— 原始的bean：等待依赖注入或者等待属性被赋值</li><li>三级缓存 singletonFactories —— Bean工厂对象：用来生成原始Bean对象放入二级缓存中 （主要解决AOP代理对象的循环依赖问题）</li></ul></div><p>不能解决循环依赖的bean：</p><ol><li>多实例bean通过setter注入时候无法解决循环依赖</li><li>构造器注入bean的情况不能解决循环依赖</li><li>单例的代理bean通过setter注入的情况无法解决循环依赖问题</li><li>设置<code>@DependsOn</code>注解的Bean不能解决循环依赖问题</li></ol><h3 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h3><h4 id="事务三个组件" tabindex="-1"><a class="header-anchor" href="#事务三个组件" aria-hidden="true">#</a> 事务三个组件</h4><ul><li>PlatformTransactionManager <ul><li>事务开启</li><li>事务提交</li><li>事务回滚</li></ul></li><li>TransactionDefinition —— 事务定义 <ul><li>事务传播</li><li>事务隔离</li><li>事务超时</li><li>事务只读</li><li>事务回滚规则</li></ul></li><li>TransactionStatus —— 事务状态/事务“本身” <ul><li>savepoint</li><li>flash</li></ul></li></ul><h4 id="事务隔离性" tabindex="-1"><a class="header-anchor" href="#事务隔离性" aria-hidden="true">#</a> 事务隔离性</h4><p>参考mysql事务隔离</p><h4 id="事务传播性" tabindex="-1"><a class="header-anchor" href="#事务传播性" aria-hidden="true">#</a> 事务传播性</h4><ul><li>require —— 【默认】没有事务开，有事务加入</li><li>require-new —— 一律开启事务，两个事务结果相互不影响</li><li>nested —— 子事务，外事务回滚影响内事务，内事务回滚不影响外事务</li><li>mandatory —— 当前有事务加入事务，没事务抛异常</li><li>supports —— 当前有事务加入事务，没事务也不开事务</li><li>not-supported —— 以非事务方式运行，如果当前有事务也忽略（挂起）</li><li>never —— 非事务方式运行，如果当前有事务则抛异常</li></ul><h4 id="回滚规则" tabindex="-1"><a class="header-anchor" href="#回滚规则" aria-hidden="true">#</a> 回滚规则</h4><p>默认回滚运行时异常 runtimeexecption，不回滚检查异常 ioexception</p><p>可配置！ rollbackfor / norollbackfor</p><h4 id="只读事务" tabindex="-1"><a class="header-anchor" href="#只读事务" aria-hidden="true">#</a> 只读事务</h4><p>性能</p><h4 id="事务超时时间" tabindex="-1"><a class="header-anchor" href="#事务超时时间" aria-hidden="true">#</a> 事务超时时间</h4><p>默认数据库的超时时间</p><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h4>',23),S={href:"https://www.bilibili.com/video/BV1Eq4y1R7Ds",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>依赖spring-jdbc</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="编程式事务" tabindex="-1"><a class="header-anchor" href="#编程式事务" aria-hidden="true">#</a> 编程式事务</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.example.demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///xxx?serverTimezone=Asia/Shanghai<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 事务管理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbcTemplate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编程式事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>

  <span class="token comment">// 方式一</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">PlatformTransactionManager</span> transactionManager<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultTransactionDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ... 事务定义</span>
    <span class="token class-name">TransactionStatus</span> status <span class="token operator">=</span> transactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;update user set money = ? where username = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangshang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      transactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      transactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 方式二</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token class-name">TransactionTemplate</span> transactionTemplate<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    transactionTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionCallbackWithoutResult</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doInTransactionWithoutResult</span><span class="token punctuation">(</span><span class="token class-name">TransactionStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;update user set money = ? where username = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangshang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          status<span class="token punctuation">.</span><span class="token function">setRollbackOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="声明式事务" tabindex="-1"><a class="header-anchor" href="#声明式事务" aria-hidden="true">#</a> 声明式事务</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--续上--&gt;</span>
<span class="token comment">&lt;!-- 解析切点表达式 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 提供注解 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--续上--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transactionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>add*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insert*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delete*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>transfer*<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* org.javaboy.demo.UserService.*(..))<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>txAdvice<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pc1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 方式三</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;update user set money = ? where username = ?&quot;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangshang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置类方式配置" tabindex="-1"><a class="header-anchor" href="#配置类方式配置" aria-hidden="true">#</a> 配置类方式配置</h5><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 开启事务的注解支持 or @EnableTransactionManagement --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@componentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;org.example.demo&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableTransactionManagement</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfig</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">DriverManagerDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span>
    ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
    ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql:///xxx?serverTimezone=Asia/Shanghai&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ds<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token class-name">JdbcTemplate</span> <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token class-name">PlatformTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事务方法上加 <code>@Transactional</code></p><h2 id="springmvc" tabindex="-1"><a class="header-anchor" href="#springmvc" aria-hidden="true">#</a> SpringMVC</h2><p><img src="https://s2.loli.net/2023/12/09/u5slz1iNmOUZao4.png" alt="image.png"></p><p>九大组件</p><ol><li>HandlerMapping —— 根据request找到相应的处理器。</li><li>HandlerAdapter —— 调用Handler的适配器。</li><li>HandlerExceptionResolver —— 处理异常</li><li>ViewResolver —— 将String类型的视图名和Locale解析为View类型的视图</li><li>RequestToViewNameTranslator —— 适配Handler的返回值。</li><li>LocaleResolver —— 从request中解析出Locale。Locale表示一个区域，如zh-cn，做i18n</li><li>ThemeResolver —— 主题解析</li><li>MultipartResolver —— 处理上传请求，将普通的request封装成MultipartHttpServletRequest</li><li>FlashMapManager —— 用于管理FlashMap，FlashMap用于在redirect重定向中传递参数</li></ol><h3 id="过滤器-拦截器" tabindex="-1"><a class="header-anchor" href="#过滤器-拦截器" aria-hidden="true">#</a> 过滤器，拦截器</h3><p>todo</p><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.example.dao.UserDAO<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- demo --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from user where name = #{name} and password = #{password}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="和jdbc的区别" tabindex="-1"><a class="header-anchor" href="#和jdbc的区别" aria-hidden="true">#</a> 和jdbc的区别</h3><ul><li>关注点不同 <ul><li>jdbc 关注如何和数据库厂商做适配</li><li>mybatis 关注如何封装事务、sql解析、接口代理反射注入、分页逻辑，从而让crud程序员更好的调用</li></ul></li></ul><h3 id="mybatis的分页实现" tabindex="-1"><a class="header-anchor" href="#mybatis的分页实现" aria-hidden="true">#</a> MyBatis的分页实现</h3><ul><li>mapper中写分页关键字</li><li>使用Mybatis的RowBounds对象，把全部数据查出后，在内存分页 —— 不适合大数据量（虽然jdbc也会优化，不会一次查询太大数据量）</li><li>使用Mybatis的Interceptor拦截器，在select语句执行前动态拼接分页关键字</li></ul><h3 id="mybatis的-和-占位符区别" tabindex="-1"><a class="header-anchor" href="#mybatis的-和-占位符区别" aria-hidden="true">#</a> MyBatis的<code>#{}</code>和<code>\${}</code>占位符区别</h3><p>都是传入动态参数的手段，但是<code>#{}</code>更加安全。</p><p>因为<code>#{}</code>会对参数预处理，特别是校验参数类型；而<code>\${}</code>只会对传入字符串进行简单的拼接，有SQL注入的风险！</p><p>一般<code>\${}</code>的应用场景是传入程序员设定的值，如表面、字段名，就是说千万不能传入前端传过来的值！</p><h2 id="数据库mysql" tabindex="-1"><a class="header-anchor" href="#数据库mysql" aria-hidden="true">#</a> 数据库MySQL</h2>`,31),T={href:"https://space.bilibili.com/37659343/channel/collectiondetail?sid=855091",target:"_blank",rel:"noopener noreferrer"},A=e('<h3 id="mysql各种存储引擎对比" tabindex="-1"><a class="header-anchor" href="#mysql各种存储引擎对比" aria-hidden="true">#</a> MySQL各种存储引擎对比</h3><table><thead><tr><th>功能</th><th>MyISAM</th><th>MEMORY</th><th>InnoDB</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>YES</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>支持B树索引</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>支持hash索引</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持集群索引</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>支持数据索引</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>支持数据压缩</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>空间使用率</td><td>低</td><td>N/A</td><td>高</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><h3 id="mysql表设计时间是用datetime还是timestamp" tabindex="-1"><a class="header-anchor" href="#mysql表设计时间是用datetime还是timestamp" aria-hidden="true">#</a> MySQL表设计时间是用datetime还是timestamp</h3><p>回答： 看实际需求 （实际：盲选timestamp）</p><p>区别：</p><table><thead><tr><th>数据类型</th><th>大小</th><th>时区</th><th>范围</th></tr></thead><tbody><tr><td>timestamp</td><td>4字节</td><td>UTC时间</td><td>1000~9999年</td></tr><tr><td>datetime</td><td>8字节</td><td>不记录时区</td><td>1970~2038年</td></tr></tbody></table><p>实际选择主要考虑时区问题</p><ul><li>如果不想考虑时区 —— datetime</li><li>否则 —— timestamp</li></ul><h3 id="事务四大特性-acid" tabindex="-1"><a class="header-anchor" href="#事务四大特性-acid" aria-hidden="true">#</a> 事务四大特性 ACID</h3><ul><li>A atomicity 原子性 —— 子任务同时成功，同时失败</li><li>C consistency 一致性 —— 两边数据一致</li><li>I isolation 隔离性 —— 多个事务间数据隔离</li><li>D durability 持久性 —— 事务成功后的记录可持久保存</li></ul><h3 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h3><h4 id="读未提交" tabindex="-1"><a class="header-anchor" href="#读未提交" aria-hidden="true">#</a> 读未提交</h4><p>脏读</p><h4 id="读已提交-rc" tabindex="-1"><a class="header-anchor" href="#读已提交-rc" aria-hidden="true">#</a> 读已提交 RC</h4><p>【oracle】</p><p>不可重复读 —— 事务第一次读和第二次读的数据不一样（因为别的事务提交更新操作）</p><h4 id="可重复读-rr" tabindex="-1"><a class="header-anchor" href="#可重复读-rr" aria-hidden="true">#</a> 可重复读 RR</h4><p>【InnoDB默认隔离级别 —— mysql】</p><p>幻读 —— 事务发现第二次读的数据变多/数据更改没生效（因为别的事务提交插入操作）</p><blockquote><p>使用行锁/表锁的方式实现的。</p></blockquote><h4 id="串行化" tabindex="-1"><a class="header-anchor" href="#串行化" aria-hidden="true">#</a> 串行化</h4><p>读写都加锁</p><h3 id="mysql事务原理" tabindex="-1"><a class="header-anchor" href="#mysql事务原理" aria-hidden="true">#</a> MySQL事务原理</h3><p>即MySQL如何实现ACID特性的？</p><ul><li>A 原子性 —— 回滚 —— undo log</li><li>C 一致性 —— 外键。但是外键不好维护，主要在业务层面进行保障</li><li>I 隔离性 —— 四种隔离级别</li><li>D 持久性 —— 重做 —— redo log</li></ul><h3 id="mvcc-原理" tabindex="-1"><a class="header-anchor" href="#mvcc-原理" aria-hidden="true">#</a> MVCC 原理</h3>',26),R={href:"https://www.bilibili.com/video/BV1864y1976i",target:"_blank",rel:"noopener noreferrer"},B=n("br",null,null,-1),M={href:"https://www.bilibili.com/video/BV1Ad4y1H7VA?p=51",target:"_blank",rel:"noopener noreferrer"},C=e(`<div class="custom-container tip"><p class="custom-container-title">提示</p><p>使用mvcc机制可以实现读（快照读）写不加锁，提高并发效率</p></div><p>“读已提交” 是使用 MVCC（Multi-Version Concurrency Control 多版本并发控制） 机制实现的，并且在不同事务隔离接别 “读已提交 RC” 和 “可重复读 RR” 之间还有细节不同。</p><p>MVCC 的实现依靠 三个隐藏字段 和 undolog 和 readview。</p><p>三个隐藏字段：</p><ul><li><code>DB_TRX_ID</code> —— 最后修改这条记录的事务编号</li><li><code>DB_ROLL_PTR</code> —— 这个记录上一条历史版本</li><li><code>DB_ROW_ID</code> —— 这条记录的编号</li></ul><p><img src="https://s2.loli.net/2023/12/03/SXwr27xs8eMF3tZ.png" alt="image.png"></p><p>readview字段：</p><ul><li><code>trx_list</code> —— 数值列表，维护READview生成时，系统正活跃的事务编号</li><li><code>up_limit_id</code> —— 上面列表中最小事务编号</li><li><code>low_limit_id</code> —— 维护readview生成时，系统尚未分配的下一个事务编号</li></ul><p>readview逻辑：</p><ol><li><s>事务进行快照读前，记录readview数据</s> （RC、RR不同，不过先忽略）</li><li>后续读，看readview <ul><li>事务编号小于readview，接受（已提交数据）</li><li>事务编号登录readview，接受（事务中修改的数据）</li><li>事务编号大于readview，忽略（其他事务数据）</li></ul></li></ol><p>在RC、RR不同隔离级别，有如下不同的readview生成时机：</p><ul><li>RC —— 每次快照读都创建readview</li><li>RR —— 第一次快照读创建readview</li></ul><h3 id="update-行锁还是表锁" tabindex="-1"><a class="header-anchor" href="#update-行锁还是表锁" aria-hidden="true">#</a> Update 行锁还是表锁</h3><p>都有：</p><ul><li>行锁 —— where条件包含了索引</li><li>表锁 —— where条件不包含索引</li></ul><h3 id="共享锁-排他锁" tabindex="-1"><a class="header-anchor" href="#共享锁-排他锁" aria-hidden="true">#</a> 共享锁/排他锁</h3><p>共享锁/排他锁是行锁的两个锁类型：</p><ul><li>共享锁： 其他事务可以再为其加共享锁，但是无法加排他锁</li><li>排他锁： 其他事务无法在该行加任何锁（共享/排他）</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span> <span class="token comment">/* 共享锁 */</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span> <span class="token comment">/* 排他锁 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limit-500000-10-优化" tabindex="-1"><a class="header-anchor" href="#limit-500000-10-优化" aria-hidden="true">#</a> limit 500000, 10 优化</h3><p>因为要跳过50w行数据再进行输出，性能肯定差。</p><p>优化1： SQL层面 —— 先用索引子查询结果作为过滤条件</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> 
<span class="token keyword">from</span> <span class="token keyword">user</span>
<span class="token keyword">where</span> id <span class="token operator">&gt;=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id
             <span class="token keyword">from</span> <span class="token keyword">user</span>
             <span class="token keyword">order</span> <span class="token keyword">by</span> id
             <span class="token keyword">limit</span> <span class="token number">1</span> <span class="token keyword">offset</span> <span class="token number">499999</span><span class="token punctuation">)</span>
<span class="token keyword">order</span> <span class="token keyword">by</span> id
<span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优化2： 业务层面 —— 冷热数据分离</p><h3 id="索引失效" tabindex="-1"><a class="header-anchor" href="#索引失效" aria-hidden="true">#</a> 索引失效</h3><p>字符1、关键字2、运算3、联合索引1</p><ul><li>字段类型必须用引号<code>&#39;...&#39;</code>扩起来，否则可能隐式转换导致索引失效</li><li><code>or</code></li><li><code>&lt;,&gt;,!=,not in,is null,is not null</code></li><li>运算<code>+,-,*,/</code></li><li>内置函数</li><li><code>like &#39;%x%&#39;</code> 导致索引失效 （但<code>like &#39;x%&#39;</code>不会）</li><li>联合索引中，查询条件没有联合索引中的第一列</li></ul><h3 id="为什么是b-树" tabindex="-1"><a class="header-anchor" href="#为什么是b-树" aria-hidden="true">#</a> 为什么是B+树？</h3><p>首先 B树是多路平衡树，高度相对矮，降低磁盘IO次数</p><p>然后 B+树是增强的B树，优化如下：</p><ol><li>所有数据在叶子节点，非叶子节点存储索引 <ul><li>非叶子节点只存索引，所以同样高度存储更多数据，磁盘IO次数更少</li></ul></li><li>叶子节点数据使用双向链表 <ul><li>更好的范围查询（只需查两个节点，然后遍历中间数据即可。反观B树要遍历所有节点）</li><li>IO次数更稳定（所有数据都在叶子上）</li><li>叶子节点存储所有数据</li></ul></li></ol><h3 id="索引优缺点" tabindex="-1"><a class="header-anchor" href="#索引优缺点" aria-hidden="true">#</a> 索引优缺点</h3><p>MySQL B+树实现</p><p>优点：</p><ul><li>减少IO次数，提升数据查询性能</li><li>B+树索引在进行范围查找的时候，只需要找到起始节点，然后基于叶子节点的链表顺序查找即可，查询效率高</li><li>通过唯一索引约束，可以确保数据表中数据唯一</li></ul><p>缺点： 不合理使用照成</p><ul><li>数据量大时，索引的维护成本也大 —— 索引不能太多</li><li>如果字段值重复过多，创建索引反而导致性能下降</li></ul><h3 id="聚簇和非聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇和非聚簇索引" aria-hidden="true">#</a> 聚簇和非聚簇索引</h3>`,38),O={href:"https://www.bilibili.com/video/BV17D4y1e78A/",target:"_blank",rel:"noopener noreferrer"},I=e(`<p>聚簇索引（也称一级索引） 就是指 B+树上非叶子节点上的索引，一个表有且只有一个（一组），一般存行的主键</p><p><img src="https://s2.loli.net/2023/12/04/ngeIhzKEQFiTjCc.png" alt="image.png"></p><p>非聚簇索引（也称二级索引、辅助索引） 就是聚簇索引外的（一般就是指主键索引外的）索引</p><p><img src="https://s2.loli.net/2023/12/04/sMB3O4fb9rnRa7m.png" alt="image.png"></p><h3 id="索引下推-索引覆盖-回表" tabindex="-1"><a class="header-anchor" href="#索引下推-索引覆盖-回表" aria-hidden="true">#</a> 索引下推？索引覆盖？回表？</h3><ul><li><p>回表 —— 查询触发非聚簇索引，获得主键，回聚簇索引中找行数据的过程就叫回表</p></li><li><p>索引覆盖 —— 如果查询的数据在非聚簇索引中就有存，就不需要回表。如：<code>select name from user where name=&#39;王五&#39;</code> 其中name添加了索引</p></li><li><p>索引下推（ICP，Index Condition Pushdown） —— 是mysql5.6推出的查询优化方案，目的是减少数据库查询中不必要的数据读取和计算，原理是将查询条件尽可能的推送到索引层进行过滤减少磁盘读取的数据量。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> tuser <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span> <span class="token operator">and</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>
联合索引 <span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>
主键索引 id

索引下推前： 联合索引只存第一个健，即name。索引时先二级索引找name匹配，然后回表找数据，然后匹配age —— 多少条数据回表多少次
索引下推后： 联合索引存储全部键，即name和age。索引时在二级索引就能匹配name、age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="redis和mysql如何保证数据一致性" tabindex="-1"><a class="header-anchor" href="#redis和mysql如何保证数据一致性" aria-hidden="true">#</a> Redis和MySQL如何保证数据一致性</h3><p>Redis做缓存功能，减少MySQL的IO次数和提升数据的响应速度。</p><p>一般应用先从redis读数据，缓存没命中才查数据库，然后查询结果存redis。</p><p>这里可能因为数据库数据更改，导致redis、mysql数据不一致。因为两边的数据有先后，且不由事务管理，所以不管谁先谁后，都可能导致数据 “短期” 不一致。</p><p>所以，这里只有 “最终一致” 的方案（即应用场景允许短期的不一致，但是最终结果一致）。如基于RocketMQ的可靠性消息通信，通过异步重试保证Redis数据最终更新成功。</p><p><img src="https://s2.loli.net/2023/12/04/7P8fl1VbTJtc3ej.png" alt="image.png"></p><h3 id="分库分表" tabindex="-1"><a class="header-anchor" href="#分库分表" aria-hidden="true">#</a> 分库分表</h3><p>目的： 减少数据库负担，提高查询速度</p><h4 id="垂直切分-水平切分" tabindex="-1"><a class="header-anchor" href="#垂直切分-水平切分" aria-hidden="true">#</a> 垂直切分/水平切分</h4><p>垂直切分</p><p>优点</p><ul><li>解耦</li><li>缓解cpu的瓶颈</li></ul><p>缺点</p><ul><li>需要聚合数据，开发复杂度提高</li><li>分布式id，事务处理变得复制</li><li>依然存在单表数据大的问题</li></ul><p>水平拆分</p><p>优点</p><ul><li>单表数据量减少</li><li>应用的改造小</li></ul><p>缺点</p><ul><li>扩展表字段的时候很麻烦</li><li>跨库的关联查询性能差</li></ul><h3 id="常见分库分表中间件" tabindex="-1"><a class="header-anchor" href="#常见分库分表中间件" aria-hidden="true">#</a> 常见分库分表中间件</h3><p>proxy： mycat；atals；sharding-proxy；mysql-proxy</p><p>非proxy，jdbc直连： sharding-jdbc；tddl</p><h4 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子</h4><p>e.g. 订单表每天新增500万数据，分库分表如何设计？</p><p>？？？</p><h3 id="mysql主从架构" tabindex="-1"><a class="header-anchor" href="#mysql主从架构" aria-hidden="true">#</a> MySQL主从架构</h3><p>3个线程 + 2个日志</p><ol><li>sql操作，更新data</li><li>binlog记录sql</li><li>主中的log dump thread线程通知从中的io thread线程</li><li>relaylog（中继日志）记录，执行sql</li></ol><p>一主一从： （最常用，从数据库用于容灾——高可用） <br><img src="https://s2.loli.net/2023/12/07/ZsiuXQFyrv7gj4L.png" alt="image.png"></p><p>一主多从：</p><p>双主：</p><p>级联同步：</p><p>环形同步： todo</p><h2 id="数据库redis" tabindex="-1"><a class="header-anchor" href="#数据库redis" aria-hidden="true">#</a> 数据库Redis</h2><p>单线程，基于内存运行</p><p>应用： 缓存、计数器、Web集群session的共享（分布式登录）、点赞/收藏</p><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>string、list、set（集合）、hash（对象）、sorted set（zset 有序集合）</p><h3 id="redis缓存管理机制" tabindex="-1"><a class="header-anchor" href="#redis缓存管理机制" aria-hidden="true">#</a> Redis缓存管理机制</h3><h4 id="内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#内存淘汰策略" aria-hidden="true">#</a> 内存淘汰策略</h4><p>大体三种方法：</p><ol><li>FIFO</li><li>LFU</li><li>LRU</li></ol><p>具体有以下方法： （不淘汰1种，全部淘汰3种，过期淘汰4种）</p><ol><li>allkeys-lru —— 最近最少</li><li>volatile-lru —— 从设置了过期时间的键集合中删除最近最少</li><li>allkeys-random —— 随机删除</li><li>...</li></ol><h4 id="键的删除策略" tabindex="-1"><a class="header-anchor" href="#键的删除策略" aria-hidden="true">#</a> 键的删除策略</h4><ul><li>定时删除 —— 定时器，键时间过了，定时器马上删除这个键 <ul><li>优点： 对内存友好</li><li>缺点： 对cpu不友好，过期键多时定时器多</li></ul></li><li>惰性删除 —— 过期放任不管，下次查询发现过期再删除 <ul><li>优点： 对cpu友好</li><li>缺点： 对内存不友好</li></ul></li><li>定期删除 —— 每隔一段时间，对数据库进行检查，删除过期的数据 <ul><li>优点： 定时删除+惰性删除，对cpu、内存都比较友好</li><li>缺点： 时间怎么定？</li></ul></li></ul><h3 id="缓存灾难问题" tabindex="-1"><a class="header-anchor" href="#缓存灾难问题" aria-hidden="true">#</a> 缓存灾难问题</h3><ul><li>缓存击穿 —— 热点key失效的瞬间，大量请求突然直奔数据库</li><li>缓存雪崩 —— 大量的缓存在同一时间失效</li><li>缓存穿透 —— 大量非法请求，到redis没有数据，直奔mysql，到mysql没数据</li></ul><h4 id="缓存击穿-2" tabindex="-1"><a class="header-anchor" href="#缓存击穿-2" aria-hidden="true">#</a> 缓存击穿 2</h4><p>某个热点key过期的间隔中（新的key被添加之前），大量请求直奔数据库。</p><p>解决方法：</p><ul><li>热点数据不过期/后台定时任务刷新</li><li>使用分布式锁/互斥锁，需要有锁才能查数据库，这样查数据库的请求数量可以控制非常小 <ul><li>zookeeper实现</li><li>redis实现</li></ul></li></ul><h4 id="缓存雪崩-3" tabindex="-1"><a class="header-anchor" href="#缓存雪崩-3" aria-hidden="true">#</a> 缓存雪崩 3</h4><p>出现雪崩情况：</p><ol><li>缓存服务器挂了</li><li>热点数据缓存集体失效</li><li>高峰期缓存局部失效</li></ol><p>解决：</p><ol><li>加锁排队</li><li>设置分散过期时间</li><li>高可用，redis集群 （下面介绍）</li></ol><h4 id="缓存穿透-4" tabindex="-1"><a class="header-anchor" href="#缓存穿透-4" aria-hidden="true">#</a> 缓存穿透 4</h4><p>黑客使用 -1 这种 orderid 发送请求，导致每次请求都要查询数据库。</p><p>解决：</p><ol><li>对参数合法性进行校验 —— 无法完全杜绝</li><li>缓存空对象【记得加过期时间】：每次查mysql的结果都记录到redis中 —— 但可能用不同的参数</li><li>使用布隆过滤器 （后面介绍）</li><li>把ip拉黑 —— 但可能换不同的ip</li></ol><h5 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h5><p>BloomFilter</p><p>还有加强版：布谷鸟过滤器</p><p>采用一个很长的二进制数组，通过一系列的Hash函数来确定该数是否存在。</p><p>每次key经过多个hash计算，将计算结果下标上的值设置为1</p><p>读的时候也进行同样计算，如果下标值全为1认为该值存在。</p><p>问题：</p><ol><li>误判 —— 无法避免，只能扩展二进制数组长度</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.16.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;bloom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化：预计元素大小1000000L，误判率1%</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">1000000L</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 增加数据</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;8888&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果商品被删除了怎么办？</p><ol><li>定时异步重建布隆过滤器</li><li>计数Bloom Filter</li></ol><h3 id="redis持久化" tabindex="-1"><a class="header-anchor" href="#redis持久化" aria-hidden="true">#</a> Redis持久化</h3><p>Redis 第一次开机，加载持久化文件。时间间隔后，内存里的数据写入到磁盘中，生成持久化文件RDB、AOF。</p><h4 id="持久化机制rdb" tabindex="-1"><a class="header-anchor" href="#持久化机制rdb" aria-hidden="true">#</a> 持久化机制RDB</h4><div class="custom-container warning"><p class="custom-container-title">注意</p><p>分钟级别的备份。之所以分钟级别，因为每次备份遍历全部数据，生成【快照】，所以开销不小。 后面参考mysql的binlog，采用AOF记录写入/修改记录，降低备份开销，做到秒级备份。</p></div><p>RDB： Redis进程执行fork操作创建子进程，RDB持久化过程由子进程负责，会先将数据写入到临时文件，待持久化结束后，再用这个临时文件替换上次持久化好的文件。整个过程中主进程不需要任何io操作，保证极高的性能。阻塞只发生在fork阶段，一般时间很短。</p><p>快照方案：（触发机制）</p><ul><li>bgsave —— 子进程创建快照文件</li><li>save —— 主进程创建快照文件 —— 阻塞</li><li>自己配置</li></ul><p><img src="https://s2.loli.net/2023/12/07/N7LeY95yfaDqOHb.png" alt="image.png"></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞</td><td>是</td><td>是（阻塞发生在fork）</td></tr><tr><td>复杂度</td><td><code>O(n)</code></td><td><code>O(n)</code></td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork，消耗内存</td></tr></tbody></table><p>问题：</p><ol><li>导致数据丢失 —— RDB间隔保存数据，间隔中的数据可能丢失</li></ol><h4 id="持久化机制aof" tabindex="-1"><a class="header-anchor" href="#持久化机制aof" aria-hidden="true">#</a> 持久化机制AOF</h4><p>实时追加更改命令到AOF缓冲区，然后缓冲区再追加到AOF文件中</p><blockquote><p>修改 <code>redis.cnf</code> 配置开启 <code>appendonly</code> 即可</p><div class="language-cnf line-numbers-mode" data-ext="cnf"><pre class="language-cnf"><code>appendonly yes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><p><img src="https://s2.loli.net/2023/12/07/JwvFb3REPVsiQKX.png" alt="image.png"></p><p>三种机制： <code>appendfsync no/always/everysec</code></p><ul><li>no —— 缓冲区满了，一次io</li><li>always —— 每次更新都io</li><li>everysec —— 每一秒 （最好）</li></ul><h5 id="aof重写机制" tabindex="-1"><a class="header-anchor" href="#aof重写机制" aria-hidden="true">#</a> AOF重写机制</h5><p>aof重写机制： 解决aof文件满了的情况（节约内存）。具体方法就是去除冗余指令。</p><p>触发机制</p><ul><li>手动触发 <code>bgrewriteaof</code></li><li>自动触发 <ul><li><code>auto-aof-rewrite-min-size</code> 一般配置64mb、但是生产一般设置在5~10G</li><li><code>auto-aof-rewrite-min-percentage</code> 增长比例。比如100表示当前AOF是上次大小的两倍时，才重写</li></ul></li></ul><p>重写步骤</p><ol><li>创建当前AOF文件创建一个新的AOF文件</li><li>读取当前redis数据，写入到AOF中</li><li>新的AOF文件覆盖现有AOF文件</li></ol><p>重写缓冲区</p><ol><li>为了避免重写过程中主进程内存数据和AOF数据不一致，增加了重写缓冲区，主进程变更要追加到AOF的重写缓冲区</li><li>等AOF文件重写完成后，再把缓冲区的数据追加到新的AOF文件中</li></ol><h3 id="哨兵和高可用" tabindex="-1"><a class="header-anchor" href="#哨兵和高可用" aria-hidden="true">#</a> 哨兵和高可用</h3><h4 id="主从" tabindex="-1"><a class="header-anchor" href="#主从" aria-hidden="true">#</a> 主从</h4><p>master slave</p><h4 id="哨兵机制-sentinel" tabindex="-1"><a class="header-anchor" href="#哨兵机制-sentinel" aria-hidden="true">#</a> 哨兵机制（sentinel）</h4><ol><li><p>client 直接跟哨兵交互</p></li><li><p>哨兵监控master/slave状态</p></li><li><p>如果master挂了，哨兵选举新的master</p></li><li><p>分辨数据槽位 <code>key.hashcode % 16384</code></p></li></ol><h4 id="高可用" tabindex="-1"><a class="header-anchor" href="#高可用" aria-hidden="true">#</a> 高可用</h4><p>多个主从架构</p><h4 id="例子-redis集群" tabindex="-1"><a class="header-anchor" href="#例子-redis集群" aria-hidden="true">#</a> 例子：redis集群</h4><p>1台机子 6redis 3主3从 redis-5.0.5</p><p><img src="https://s2.loli.net/2023/12/08/KtBphb9JLy1xEN2.png" alt="image.png"></p><ol><li>开启cluster模式</li><li>meet 1 2 3 cluster meet ip port</li><li>指派槽位 3个集群 master节点才有槽位</li><li>分配主节点、从节点</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node1 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node1:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-1.conf <span class="token parameter variable">--port</span> <span class="token number">6379</span>
<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node2 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node2:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-2.conf <span class="token parameter variable">--port</span> <span class="token number">6380</span>
<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node3 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node3:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-3.conf <span class="token parameter variable">--port</span> <span class="token number">6381</span>
<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node4 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node4:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-4.conf <span class="token parameter variable">--port</span> <span class="token number">6382</span>
<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node5 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node5:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-5.conf <span class="token parameter variable">--port</span> <span class="token number">6383</span>
<span class="token function">docker</span> create <span class="token parameter variable">--name</span> redis-node6 <span class="token parameter variable">--net</span> <span class="token function">host</span> <span class="token parameter variable">-v</span> /data/redis-data/node6:/data redis:5.0.5 --cluster-enabled <span class="token function">yes</span> --cluster-config-file nodes-node-6.conf <span class="token parameter variable">--port</span> <span class="token number">6384</span>

<span class="token function">docker</span> start redis-node1 redis-node2 redis-node3 redis-node4 redis-node5 redis-node6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-cli <span class="token parameter variable">--cluster</span> <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># meet + 分配槽位</span>
<span class="token comment"># --cluster-replicas 1 分配主从（前3主）</span>
redis-cli <span class="token parameter variable">--cluster</span> create <span class="token number">115.159</span>.199.197:6379 <span class="token number">115.159</span>.199.197:6380 <span class="token number">115.159</span>.199.197:6381 <span class="token number">115.159</span>.199.197:6382 <span class="token number">115.159</span>.199.197:6383 <span class="token number">115.159</span>.199.197:6384 --cluster-replicas <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看集群状态（随便进入一个redis）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cluster nodes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="扩容-添加节点" tabindex="-1"><a class="header-anchor" href="#扩容-添加节点" aria-hidden="true">#</a> 扩容/添加节点</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 容器</span>
<span class="token function">docker</span> <span class="token punctuation">..</span>.
<span class="token comment"># 添加节点</span>
redis-cli <span class="token parameter variable">--cluster</span> add-node <span class="token number">115.159</span>.199.197:6385 <span class="token number">115.159</span>.199.197:6383
redis-cli <span class="token parameter variable">--cluster</span> add-node <span class="token number">115.159</span>.199.197:6386 <span class="token number">115.159</span>.199.197:6383 --cluster-slave --cluster-master-id efxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4e1
<span class="token comment"># 槽位</span>
<span class="token comment"># 数据、槽位都会移动 —— 扩容</span>
redis-cli <span class="token parameter variable">--cluster</span> reshard <span class="token number">115.159</span>.199.197:6385
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="缩容-移除节点" tabindex="-1"><a class="header-anchor" href="#缩容-移除节点" aria-hidden="true">#</a> 缩容/移除节点</h5><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 槽位</span>
redis-cli <span class="token parameter variable">--cluster</span> reshard <span class="token number">115.159</span>.199.197:6385 --cluster-from efxxxxxxxxxxxxxxxxxxxxxxxxxxxxx4e1 --cluster-to efxxxxxxxxxxxxxxxxxxxxxxxxxxxxx38 --cluster-slots <span class="token number">1000</span>
<span class="token comment"># 减少节点</span>
redis-cli <span class="token parameter variable">--cluster</span> del-node <span class="token number">115.159</span>.199.197:6386 <span class="token number">115.159</span>.199.197:6385
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息队列rabbitmq" tabindex="-1"><a class="header-anchor" href="#消息队列rabbitmq" aria-hidden="true">#</a> 消息队列RabbitMQ</h2><ul><li>生产者： 生产消息</li><li>消费者： 消费消息</li></ul><h3 id="为什么用消息队列" tabindex="-1"><a class="header-anchor" href="#为什么用消息队列" aria-hidden="true">#</a> 为什么用消息队列？</h3><ol><li>解耦 —— 中心系统不需要适配子系统</li><li>异步 —— 对于不依赖全程的返回结果，可以直接返回消息接收，后续后台处理即可</li><li>削峰 —— 在消息队列后可以增加限流措施，保证服务不会被流量击垮</li></ol><h3 id="消息队列选型" tabindex="-1"><a class="header-anchor" href="#消息队列选型" aria-hidden="true">#</a> 消息队列选型</h3><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ （推荐）</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>PRODUCER-COMSUMER</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>PUBLISH-SUBSCRIBE</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>REQUEST-REPLY</td><td>支持</td><td>支持</td><td>-</td><td>支持</td></tr><tr><td>API完备</td><td>高</td><td>高</td><td>高</td><td>低（静态配置）</td></tr><tr><td>多语言支持</td><td>支持，Java优先</td><td>语言无关</td><td>支持，Java优先</td><td>支持</td></tr><tr><td>单机吞吐量</td><td>万级</td><td>万级</td><td>十万级</td><td></td></tr><tr><td>消息延迟</td><td>-</td><td>微秒级</td><td>毫秒级</td><td>-</td></tr><tr><td>可用性</td><td>高（主从）</td><td>高（主从）</td><td>非常高（分布式）</td><td>高</td></tr><tr><td>消息丢失</td><td>-</td><td>低</td><td>理论上不会丢失</td><td>-</td></tr><tr><td>消息重复</td><td>-</td><td>可控制</td><td>理论上会有重复</td><td>-</td></tr><tr><td>文档的完备性</td><td>高</td><td>高</td><td>高</td><td>中</td></tr><tr><td>提供快速入门</td><td>有</td><td>有</td><td>有</td><td>无</td></tr><tr><td>首次部署难度</td><td>-</td><td>低</td><td>中</td><td>高</td></tr></tbody></table><h3 id="rabbitmq主从架构确保高可用" tabindex="-1"><a class="header-anchor" href="#rabbitmq主从架构确保高可用" aria-hidden="true">#</a> RabbitMQ主从架构确保高可用</h3><p>https://www.bilibili.com/video/BV1Ad4y1H7VA?p=92</p><p>架构1</p><p>问题：</p><ol><li>单点故障</li><li>消息拉取开销</li></ol><p>架构2</p><p>问题</p><ol><li>数据量全部在一台机器上</li></ol><h3 id="kafka分布式架构确保高可用" tabindex="-1"><a class="header-anchor" href="#kafka分布式架构确保高可用" aria-hidden="true">#</a> Kafka分布式架构确保高可用</h3><p>https://www.bilibili.com/video/BV1Ad4y1H7VA?p=93</p><h3 id="生产者消费者模型-虚拟唤醒问题" tabindex="-1"><a class="header-anchor" href="#生产者消费者模型-虚拟唤醒问题" aria-hidden="true">#</a> 生产者消费者模型 虚拟唤醒问题</h3><p>只需要把下面的 if 判断改为 while 即可！</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">PCDate</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_COUNT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 判断 干活 通知</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">_produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">_produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;pool满了，waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 干活</span>
      pool<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;produce number:&quot;</span><span class="token operator">+</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;, pool size:&quot;</span><span class="token operator">+</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 通知</span>
      pool<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">_consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">_consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;pool空了，waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 干活</span>
      <span class="token keyword">int</span> temp <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      pool<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;consume number:&quot;</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">&quot;, pool size:&quot;</span><span class="token operator">+</span>pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 通知</span>
      pool<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProduceConsume</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PCData</span> pcData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PCData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      pcData<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
      pcData<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// </span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//</span>
    pcData<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rabbitmq架构设计" tabindex="-1"><a class="header-anchor" href="#rabbitmq架构设计" aria-hidden="true">#</a> RabbitMQ架构设计</h3><p>AMQP实现</p><ul><li>Broker 提供传输服务，维护生产者到消费者的路线</li><li>Exchange 消息交换机</li><li>Queue</li><li>binding —— 绑定 把exchange和queue按路由规则绑定</li><li>Routing key —— 路由关键字。 exchange 根据这个关键字进行消息投递</li><li>vhost —— 虚拟主机</li><li>producer 生产者</li><li>consumer 消费者</li><li>channel 消息通道</li></ul><h3 id="rabbitmq的事务消息处理" tabindex="-1"><a class="header-anchor" href="#rabbitmq的事务消息处理" aria-hidden="true">#</a> RabbitMQ的事务消息处理</h3><p>生产者事务确认机制 —— 和数据库事务一样</p><p>消费者事务确认机制 —— 将rabbit的自动ack机制改为手动ack机制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>

consumer<span class="token operator">:</span>
  channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">/* 应答标识 */</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rabbitmq如何确保消息不丢失" tabindex="-1"><a class="header-anchor" href="#rabbitmq如何确保消息不丢失" aria-hidden="true">#</a> RabbitMQ如何确保消息不丢失</h3><p>消息丢失情况</p><ol><li>生产者发送消息到RabbitMQ Server过程中丢失消息</li><li>RabbitMQ Server收到消息后，在持久化之前宕机导致数据丢失</li><li>消费端收到消息，还没来得及处理就宕机，导致RabbitMQ Server认为消息已处理，而实际没处理的情况</li></ol><p>处理</p><ol><li>生产者发消息到MQ的情况 —— RabbitMQ提供Confirm的消息确认机制。就是如果Server端收到消息，会返回一个ack的消息，然后生产者可以根据返回解决决定是否重发消息</li><li>RabbitMQ中途宕机的情况 —— RabbitMQ开启消息持久化 —— 但为了确保万无一失，还是要结合生产者的confirm机制一起使用</li><li>消费者端 —— 把消息的签收机制改为手动签收。也就说需要消费端手动调用消息确认方法，才标识这个消息被签收。但是这种方式可能照成消息的重复签收，因此需要考虑幂等性的设计。</li></ol><h3 id="rabbitmq如何确保消息不被重复消费" tabindex="-1"><a class="header-anchor" href="#rabbitmq如何确保消息不被重复消费" aria-hidden="true">#</a> RabbitMQ如何确保消息不被重复消费</h3><p>幂等性的设计</p><h3 id="rabbitmq消息队列如何确保消息顺序性" tabindex="-1"><a class="header-anchor" href="#rabbitmq消息队列如何确保消息顺序性" aria-hidden="true">#</a> RabbitMQ消息队列如何确保消息顺序性</h3><p>e.g. 需要按顺序执行 创建订单、订单付款、订单完成</p><p><img src="https://s2.loli.net/2023/12/07/kuPp5AvfDrqyNRi.png" alt="image.png"></p><ol><li><p>发送消息的顺序 —— 这个一般没问题</p></li><li><p>确保MQ消息局部顺序性 —— 同一类消息被同一个队列处理</p><p><img src="https://s2.loli.net/2023/12/07/W1XDaBtsnJf85YP.png" alt="image.png"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 运算消息主键%n，根据结果指定路由key 发送到不同队列</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Message15</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message15</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">Message15</span><span class="token punctuation">.</span><span class="token constant">EXCHANGE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id <span class="token operator">%</span> <span class="token class-name">Message15</span><span class="token punctuation">.</span><span class="token constant">QUEUE_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>确保消费有序 —— RabbitMQ提供了“Exclusive Consumer”的特性，可以确保一个队列中的消息只发送给一个Consumer，但是开启这种特性限制性能不适合高并发常见。</p><p>单活模式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Queue</span> <span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-single-active-consumer&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> exclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span> autoDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> 
    durable<span class="token punctuation">,</span> exclusive<span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="消息队列中消息堆积与过期处理方案" tabindex="-1"><a class="header-anchor" href="#消息队列中消息堆积与过期处理方案" aria-hidden="true">#</a> 消息队列中消息堆积与过期处理方案</h3><p>产生消息堆积的情况：</p><ol><li>消费者没有消费消息</li><li>MQ收不到消费者的ACK确认</li></ol><p>消息堆积解决：</p><ol><li>检查消费者是否宕机</li><li>如果有大量消息堆积，需要写应用程序，把单个MQ信息拷贝到多个MQ中，然后启动多个消费者消费信息</li></ol><p><img src="https://s2.loli.net/2023/12/07/XqW2Vnh8O4pSJEv.png" alt="image.png"></p><p>死信队列</p><ol><li>避免大量消息堆积，一般给消息加过期时间</li><li>过期消息不能直接清除，而是加入死信队列</li><li>死信队列中的消息通过程序存入mysql，然后还要重新将这些消息发给MQ重新消费</li></ol><p><img src="https://s2.loli.net/2023/12/07/YgpDV1e7LhbJkEj.png" alt="image.png"></p><h2 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h2><h3 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h3><p>synchronize 单机没法满足的情况。</p><p>注意点</p><ol><li>互斥</li><li>过期时间</li><li>重入</li><li>定时器</li></ol><h4 id="分布式锁例子" tabindex="-1"><a class="header-anchor" href="#分布式锁例子" aria-hidden="true">#</a> 分布式锁例子</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> product <span class="token operator">=</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> lockid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程安全问题，封装中使用threadlocal解决</span>

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span> lockid<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// stringRedisTemplate.expire(product, 30, TimeUnit.SECONDS);</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token string">&quot;fail&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> stock <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>stock<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stock<span class="token operator">--</span><span class="token punctuation">;</span>
      stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;stock&quot;</span><span class="token punctuation">,</span> stock<span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扣除成功，库存：&quot;</span><span class="token operator">+</span>stock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;库存不足&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>lockid<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stringRedisTemplate<span class="token punctuation">.</span><span class="token function">elete</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Autowired</span>
  <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> lock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      lock <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      lock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> lock<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内存泄漏</span>
      stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分布式锁框架 redisson</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">Redisson</span> redisson<span class="token punctuation">;</span> <span class="token comment">// 分布式锁框架</span>

<span class="token class-name">RLock</span> rlock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
rLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...业务</span>
rLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分布式事务" tabindex="-1"><a class="header-anchor" href="#分布式事务" aria-hidden="true">#</a> 分布式事务</h3><p>数据一致性、回滚 Seata TCC 两阶段提交1：保留原始值，然后获取全局锁后提交；2：提交事务异常后，通过1阶段保留的原始值进行回滚</p><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手" aria-hidden="true">#</a> 三次握手</h3><ul><li>a SYN</li><li>b SYN+ACK</li><li>a ACK</li></ul><h3 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手" aria-hidden="true">#</a> 四次挥手</h3><ul><li>a fan</li><li>b ack ... wait for b数据传输完成</li><li>b fan</li><li>a ack ... 2MSL wait for 等待b是否重发fan，</li></ul>`,189),_={href:"https://www.bilibili.com/video/BV1by4y1C7p2/",target:"_blank",rel:"noopener noreferrer"},D=e('<h3 id="tcp-如何保证可靠传输" tabindex="-1"><a class="header-anchor" href="#tcp-如何保证可靠传输" aria-hidden="true">#</a> TCP 如何保证可靠传输</h3><ul><li>分组 —— 基于数据大小分组发送</li><li>校验和 —— 确保传输过程没丢东西</li><li>重传 —— 如果丢了/超时了就重传</li><li>窗口 —— 速率控制</li></ul><h3 id="服务网格" tabindex="-1"><a class="header-anchor" href="#服务网格" aria-hidden="true">#</a> 服务网格</h3><p>微服务</p><p>todo</p><h2 id="加密" tabindex="-1"><a class="header-anchor" href="#加密" aria-hidden="true">#</a> 加密</h2><ul><li>AES</li><li>RSA 幂运算 非对称</li><li>ECC（Elliptic Curve Cryptography）椭圆曲线的非对称加密算法</li></ul>',7),P=n("br",null,null,-1),E={href:"https://mp.weixin.qq.com/s/phcGnGkcYPBvaxQZs33SKw",target:"_blank",rel:"noopener noreferrer"},L=e(`<ul><li>SM2、SM3、SM4、SM7、SM9</li></ul><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><h3 id="哲学家就餐问题-——-死锁" tabindex="-1"><a class="header-anchor" href="#哲学家就餐问题-——-死锁" aria-hidden="true">#</a> 哲学家就餐问题 —— 死锁</h3><p><img src="https://s2.loli.net/2023/11/23/Kjw7EzpC5Zh2U4d.png" alt="sJ6P4zTViZU8xWCg-image-1699604189026.png"></p><p>OOA - OOD - DDD</p><p>class：哲学家（Philosohper） class：筷子（ChopStick）</p><h4 id="模拟死锁过程" tabindex="-1"><a class="header-anchor" href="#模拟死锁过程" aria-hidden="true">#</a> 模拟死锁过程</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Philosohper</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">ChopStick</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">ChopStick</span> left<span class="token punctuation">,</span> <span class="token class-name">ChopStick</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">&quot;号ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">ChopStick</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChopStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ChopStick</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChopStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ChopStick</span> c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChopStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ChopStick</span> c4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChopStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ChopStick</span> c5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChopStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Philosohper</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cs1<span class="token punctuation">,</span> cs2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Philosohper</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token string">&quot;p2&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> cs2<span class="token punctuation">,</span> cs3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Philosohper</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token string">&quot;p3&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> cs3<span class="token punctuation">,</span> cs4<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Philosohper</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token string">&quot;p4&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> cs4<span class="token punctuation">,</span> cs5<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Philosohper</span> p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Philosohper</span><span class="token punctuation">(</span><span class="token string">&quot;p5&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> cs5<span class="token punctuation">,</span> cs1<span class="token punctuation">)</span><span class="token punctuation">;</span>

  p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p4<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  p5<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决死锁问题" tabindex="-1"><a class="header-anchor" href="#解决死锁问题" aria-hidden="true">#</a> 解决死锁问题</h4><p>一个换手拿</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">&quot;号ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">synchronized</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token string">&quot;号ok&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多任务同时失败-——-分布式问题" tabindex="-1"><a class="header-anchor" href="#多任务同时失败-——-分布式问题" aria-hidden="true">#</a> 多任务同时失败 —— 分布式问题</h3><p>多个任务，一个执行错误，其他都应该取消 —— 代码如何写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token class-name">S</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">&quot;t2&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token string">&quot;t3&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> timeInSeconds<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> timeInSeconds<span class="token punctuation">,</span> <span class="token keyword">boolean</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>timeInSeconds <span class="token operator">=</span> timeInSeconds<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// todo</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理1 —— 不好</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">MyTask</span> task <span class="token operator">:</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">enum</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span>
  <span class="token constant">NOTEND</span><span class="token punctuation">,</span> <span class="token constant">SUCCESSED</span><span class="token punctuation">,</span> <span class="token constant">FAILED</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SleepHelper</span><span class="token punctuation">.</span><span class="token function">sleepSeconds</span><span class="token punctuation">(</span>timeInSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;任务结束！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> success <span class="token operator">?</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">SUCCESSED</span> <span class="token operator">:</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理2 todo</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,18);function V(z,F){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ul",null,[n("li",null,[a("[ ] "),n("s",null,[a("精准突击！2023最新版Java面试短期突击面试题【200P】我会出手带你一周涨薪！ - "),n("a",r,[a("https://www.bilibili.com/video/BV1Av4y187hf/?p=2"),t(s)])])]),n("li",null,[a("[x] 32小时讲完的大厂高频面试题（MySQL、Redis、Spring、算法、设计模式等） - "),n("a",d,[a("https://www.bilibili.com/video/BV1Ad4y1H7VA/"),t(s)])]),n("li",null,[a("[ ] IT老齐架构600讲 - "),n("a",k,[a("https://www.bilibili.com/video/BV1v44y117K9/"),t(s)])]),n("li",null,[a("[ ] 图灵|24版Spring全家桶面|连环60问 - "),n("a",v,[a("https://www.bilibili.com/video/BV1EN411g7M6"),t(s)])])]),m,n("blockquote",null,[n("ul",null,[n("li",null,[n("a",b,[a("https://www.bilibili.com/video/BV1Ad4y1H7VA"),t(s)])])])]),h,n("p",null,[n("a",g,[a("https://www.bilibili.com/video/BV1Rm4y1R7Px/"),t(s)])]),f,n("p",null,[a("todo "),n("a",y,[a("https://www.bilibili.com/video/BV1xz4y1g74P/"),t(s)])]),w,n("p",null,[n("a",x,[a("https://www.bilibili.com/video/BV1ET4y1N7Sp/"),t(s)])]),q,n("p",null,[n("a",S,[a("https://www.bilibili.com/video/BV1Eq4y1R7Ds"),t(s)])]),j,n("p",null,[a("推荐： "),n("a",T,[a("https://space.bilibili.com/37659343/channel/collectiondetail?sid=855091"),t(s)])]),A,n("p",null,[n("a",R,[a("https://www.bilibili.com/video/BV1864y1976i"),t(s)]),a(),B,n("a",M,[a("https://www.bilibili.com/video/BV1Ad4y1H7VA?p=51"),t(s)])]),C,n("p",null,[n("a",O,[a("https://www.bilibili.com/video/BV17D4y1e78A/"),t(s)])]),I,n("blockquote",null,[n("p",null,[a("why 2msl "),n("a",_,[a("https://www.bilibili.com/video/BV1by4y1C7p2/"),t(s)])])]),D,n("p",null,[a("国密 "),P,a(" （参考： "),n("a",E,[a("https://mp.weixin.qq.com/s/phcGnGkcYPBvaxQZs33SKw"),t(s)]),a("）")]),L])}const N=p(i,[["render",V],["__file","interview.html.vue"]]);export{N as default};
