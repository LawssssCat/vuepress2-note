import{_ as o,r as c,o as l,c as i,f as e,a as n,b as s,d as t,e as p}from"./app-04e6f892.js";const u={},r=p(`<h2 id="时间、空间复杂度" tabindex="-1"><a class="header-anchor" href="#时间、空间复杂度" aria-hidden="true">#</a> 时间、空间复杂度</h2><p>说明： 书面说法看书，笔记记理解</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>一般，<code>T()</code>表示时间复杂度，<code>O()</code>表示趋势函数。这里就不细分，统一用<code>T()</code>了。</p></div><h3 id="时间复杂度分析" tabindex="-1"><a class="header-anchor" href="#时间复杂度分析" aria-hidden="true">#</a> 时间复杂度分析</h3><ol><li><p>常量阶</p><p><code>T(1)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> 
<span class="token keyword">int</span> sum <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>平方阶 —— 看多少个循环</p><p>一个循环<code>T(n)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个循环<code>T(n^2)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">=</span> sum <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对数阶 —— 关注下标是否跳跃</p><p>下标跳跃 <code>T(logn)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>下标不跳跃： 1,2,3,4,5,... <br> 下表跳跃： 1,2,2<em>2,2</em>2*2,...</p></div></li><li><p>线性对数阶 —— 上面两种情况的集合</p><p><code>T(n*logn)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">for</span> n
  i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>还有 指数阶<code>T(2^n)</code>、阶乘阶<code>T(n!)</code> 基本不会遇到。 <br> 下面是不同时间复杂度的性能发展：</p><p><img src="https://s2.loli.net/2023/11/25/VMFBXQHTfJZjzwd.webp" alt="497a3f120b7debee07dc0d03984faf04.webp"></p><h3 id="空间复杂度分析" tabindex="-1"><a class="header-anchor" href="#空间复杂度分析" aria-hidden="true">#</a> 空间复杂度分析</h3><p>表示生成了多少个内存变量。</p><p>常见的 <code>O(1)</code>、<code>O(n)</code>、<code>O(n^2)</code></p><p>如： 下面是 <code>O(n)</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    print out a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="细分时间复杂度" tabindex="-1"><a class="header-anchor" href="#细分时间复杂度" aria-hidden="true">#</a> 细分时间复杂度</h3><ul><li>最好情况时间复杂度（best case time complexity）</li><li>最坏情况时间复杂度（worst case time complexity）</li><li>平均情况时间复杂度（average case time complexity）</li><li>均摊时间复杂度（amortized time complexity） —— 特殊的“平均情况时间复杂度” —— 用“摊还分析法”分析，将最坏情况时间均摊到其他情况中，往往统计结果得到最好时间情况。</li></ul><h2 id="数据结构和算法" tabindex="-1"><a class="header-anchor" href="#数据结构和算法" aria-hidden="true">#</a> 数据结构和算法</h2><p>20 个重点： （按常用程度/难易程度排序）</p>`,16),d=p('<h3 id="数据结构-数组" tabindex="-1"><a class="header-anchor" href="#数据结构-数组" aria-hidden="true">#</a> 数据结构 - 数组</h3><p><img src="https://s2.loli.net/2023/11/25/rD2PxI7STemoKt4.webp" alt="b6b71ec46935130dff5c4b62cf273477.webp"></p><h4 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型" aria-hidden="true">#</a> 数组类型</h4><ol><li>有序数组</li><li>无序数组 —— 单纯用来存数据</li></ol><h4 id="数组应用" tabindex="-1"><a class="header-anchor" href="#数组应用" aria-hidden="true">#</a> 数组应用</h4><ol><li>添加时需要遍历 —— 无序数组插入时可用快排优化添加情况：将插入的位置原数据放最后，插入的新数据放空坑；</li><li>删除时需要遍历 —— 标记删除优化删除情况，如 JVM 的标记删除垃圾回收机制</li></ol><h3 id="数据结构-链表" tabindex="-1"><a class="header-anchor" href="#数据结构-链表" aria-hidden="true">#</a> 数据结构 - 链表</h3><h4 id="链表类型" tabindex="-1"><a class="header-anchor" href="#链表类型" aria-hidden="true">#</a> 链表类型</h4>',8),k=n("li",null,[n("p",null,"单向链表"),n("p",null,[n("img",{src:"https://s2.loli.net/2023/11/25/S6RXHk5iZOU7ftC.webp",alt:"b93e7ade9bb927baad1348d9a806ddeb.webp"}),n("img",{src:"https://s2.loli.net/2023/11/25/cEHqlepVxCyzNfn.webp",alt:"452e943788bdeea462d364389bd08a17.webp"})])],-1),m=n("p",null,"循环链表",-1),v=n("p",null,[n("img",{src:"https://s2.loli.net/2023/11/25/ufbC168nNzgOlIP.webp",alt:"86cb7dc331ea958b0a108b911f38d155.webp"})],-1),b={href:"https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,[n("p",null,"双向链表"),n("p",null,[n("img",{src:"https://s2.loli.net/2023/11/25/AyxMq7UHXkCRdcD.webp",alt:"cbc8ab20276e2f9312030c313a9ef70b.webp"})])],-1),w=p('<h4 id="链表应用" tabindex="-1"><a class="header-anchor" href="#链表应用" aria-hidden="true">#</a> 链表应用</h4><ol><li><p>LRU 缓存淘汰算法 —— 维护一个有序单链表。当有数据被访问，遍历链表删除相同数据并在头部插入数据。当有缓存要清除，删除尾部数据。 时间复杂度<code>O(n)</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>缓存清理通常有三种策略： 先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（Least Recently Used）</p></div></li></ol><h4 id="链表题目" tabindex="-1"><a class="header-anchor" href="#链表题目" aria-hidden="true">#</a> 链表题目</h4>',3),g=n("p",null,"如何判断一个字符串是否是回文字符串的问题",-1),f=n("br",null,null,-1),_=n("br",null,null,-1),y=n("br",null,null,-1),x={href:"https://github.com/andavid/leetcode-java/blob/master/note/234/README.md",target:"_blank",rel:"noopener noreferrer"},T=p('<h4 id="链表代码" tabindex="-1"><a class="header-anchor" href="#链表代码" aria-hidden="true">#</a> 链表代码</h4><p>常见的链表操作</p><ul><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表合并</li><li>删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ul><h3 id="数据结构-栈" tabindex="-1"><a class="header-anchor" href="#数据结构-栈" aria-hidden="true">#</a> 数据结构 - 栈</h3><p><img src="https://s2.loli.net/2023/11/25/fmWRuIUpDxE4MYw.webp" alt="3e20cca032c25168d3cc605fa7a53a0b.webp"></p><p>todo</p><h4 id="栈应用" tabindex="-1"><a class="header-anchor" href="#栈应用" aria-hidden="true">#</a> 栈应用</h4><ul><li>浏览器历史记录</li></ul><h3 id="数据结构-队列" tabindex="-1"><a class="header-anchor" href="#数据结构-队列" aria-hidden="true">#</a> 数据结构 - 队列</h3><p><img src="https://s2.loli.net/2023/11/25/fCkr1tcuGWE8RD5.webp" alt="9eca53f9b557b1213c5d94b94e9dce3e.webp"></p><p>todo</p><h4 id="队列题目" tabindex="-1"><a class="header-anchor" href="#队列题目" aria-hidden="true">#</a> 队列题目</h4>',12),j=n("li",null,"除了线程池这种池结构用到队列排队请求，还有那些场景用到队列排队请求？",-1),S=n("li",null,"如何实现无锁并发队列",-1),O={href:"https://www.nowcoder.com/practice/9566499a2e1546c0a257e885dfdbf30d",target:"_blank",rel:"noopener noreferrer"},B=n("ul",null,[n("li",null,[s("中缀转后缀 "),n("ul",null,[n("li",null,"数字直接写入RPN"),n("li",null,"运算符优先级大进栈，优先级小先出栈写入RPN后进栈"),n("li",null,'"(" 进栈'),n("li",null,'")" 出栈写入RPN'),n("li",null,"遍历完成后，全部出栈，写入RPN")])]),n("li",null,"后缀计算")],-1),L=p(`<h3 id="实现方式-递归" tabindex="-1"><a class="header-anchor" href="#实现方式-递归" aria-hidden="true">#</a> 实现方式 - 递归</h3><p>一些算法/数据结构遍历需要用到的实现方法。</p><p>e.g.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么时候用递归？</p><ol><li>一个问题可以分为多个子问题</li><li>子问题解决方法类似</li><li>有中止条件</li></ol><p>调试递归:</p><ol><li>打印日志发现，递归值。</li><li>结合条件断点进行调试。</li></ol><h4 id="递归应用" tabindex="-1"><a class="header-anchor" href="#递归应用" aria-hidden="true">#</a> 递归应用</h4><ul><li>DFS 深度优先搜索</li><li>前中后序</li><li>二叉树遍历</li></ul><h3 id="算法-排序🔥" tabindex="-1"><a class="header-anchor" href="#算法-排序🔥" aria-hidden="true">#</a> 算法 - 排序🔥</h3>`,11),V={href:"https://blog.csdn.net/LawssssCat/article/details/102798623",target:"_blank",rel:"noopener noreferrer"},I=n("p",null,"常用的其实就三个：",-1),q=n("ul",null,[n("li",null,[s("冒泡/插入 —— 习惯哪个用哪个 "),n("ul",null,[n("li",null,"冒泡 —— 数组、链表"),n("li",null,"插入 —— 数组、双向链表")])]),n("li",null,"归并 —— 数组，数据量大，同时内存够大"),n("li",null,"快排 —— 数组，数据量中/大")],-1),z=n("h4",{id:"冒泡排序-bubble-sort",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#冒泡排序-bubble-sort","aria-hidden":"true"},"#"),s(" 冒泡排序（Bubble-Sort）")],-1),C={href:"https://algorithm-visualizer.org/brute-force/bubble-sort",target:"_blank",rel:"noopener noreferrer"},N=p(`<p>具体的做法就是：从左往右把相邻的两个对比，把最大/最小的移到右边，然后缩小排序范围。</p><h5 id="冒泡排序for数组" tabindex="-1"><a class="header-anchor" href="#冒泡排序for数组" aria-hidden="true">#</a> 冒泡排序for数组</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 冒泡排序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortBubble</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> swapped<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token class-name">T</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>swapped<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>冒泡排序写法有许多。上述的写法初看会有疑问 “为什么swapped为false就可以停止排序了？” 这里解释下：</p><p>有这疑问大概是不清楚这个代码做了什么，其实就三步：</p><ol><li>检查排序是否正确（从小到大排序<code>for i=1 .. if(arr[i-1] &gt; arr[i])</code>） <ul><li>如果排序不正确则需要进行下一步替换（<code>swapped=true</code>）</li><li>如果排序正确，则任务完成(๑•̀ㅂ•́)و✧（<code>swapped=false</code>，<code>while(swapped)不成立</code>）</li></ul></li><li>把最大的放最后，然后排除考虑</li><li>继续第一步（只是考虑范围变小了）</li></ol><p>所以，“swapped为false就可以停止排序” 其实就是说 “排序正确！任务完成！”。很直白吧？</p></div><h5 id="冒泡排序for链表" tabindex="-1"><a class="header-anchor" href="#冒泡排序for链表" aria-hidden="true">#</a> 冒泡排序for链表</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 冒泡排序 for 链表
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedSortBubble</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">LinkedSortFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">LinkedItem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LinkedItem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> swapped<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            swapped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">LinkedItem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">LinkedItem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">{</span> <span class="token comment">// 1. swap</span>
                        cur<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        a<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        b<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    swapped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. next</span>
            <span class="token punctuation">}</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// 3. reset</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>swapped<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">LinkedItem</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LinkedSortBubble</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedSortBubble</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 22, 44, 99]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="插入排序-insertion-sort" tabindex="-1"><a class="header-anchor" href="#插入排序-insertion-sort" aria-hidden="true">#</a> 插入排序（Insertion-Sort）</h4>`,7),R={href:"https://algorithm-visualizer.org/brute-force/insertion-sort",target:"_blank",rel:"noopener noreferrer"},E=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 插入排序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortInsertion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">T</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>插入排序的思想是先把左边的（已知的）排序好，再考虑新的值：</p><ol><li>判断新的值位置是否正确（<code>arr[j] &gt; value</code>） <ol><li>如果新的值位置不对 <ul><li>把左边已排序的后移，空出位置（<code>arr[j+1] = arr[j]</code>）</li><li>再把新的值 “插入” 到对的位置上（<code>arr[j+1] = value</code>）</li></ul></li><li>如果新的值位置对了 <ul><li>继续第一步（只是考虑范围变大了）</li></ul></li></ol></li></ol><p>💡插入排序这种逐渐把考虑范围扩大的做法和冒泡排序那种逐渐把考虑范围缩小的做法刚好相反！</p></div><h4 id="选择排序-selection-sort-❌" tabindex="-1"><a class="header-anchor" href="#选择排序-selection-sort-❌" aria-hidden="true">#</a> 选择排序（Selection-Sort）❌</h4><div class="custom-container danger"><p class="custom-container-title">警告</p><p>不建议使用</p></div><p>简而言之： 遍历多次，每次把最大/最小的放在前面/后面。</p><p>不建议使用的原因是它的最大、最小、平均时间复杂度都是<code>O(n^2)</code>，没有任何优化空间，属于最慢的排序算法。且不稳定。</p><p>好处是直观（一个对程序没啥用的好处）</p><p><img src="https://s2.loli.net/2023/11/26/9iTQkDY1nluM76y.webp" alt="348604caaf0a1b1d7fee0512822f0e50.webp"></p><h4 id="归并排序-merge-sort-✈️" tabindex="-1"><a class="header-anchor" href="#归并排序-merge-sort-✈️" aria-hidden="true">#</a> 归并排序（Merge-Sort）✈️</h4>`,9),F=n("br",null,null,-1),A={href:"https://algorithm-visualizer.org/divide-and-conquer/merge-sort",target:"_blank",rel:"noopener noreferrer"},D=p(`<div class="custom-container tip"><p class="custom-container-title">提示</p><p>上述的三种排序（冒泡、插入、选择）时间复杂度高<code>O(n^2)</code>，适合小规模排序。下面介绍的归并排序、快速排序用了“分治”思想和“递归”实现，时间复杂度<code>O(nlogn)</code>，可以用在大规模排序上。</p><table><thead><tr><th>归并排序</th><th>最好</th><th>最坏</th><th>平均</th><th>备注</th></tr></thead><tbody><tr><td>时间复杂度 <td colspan="3"><code>O(nlogn)</code></td></td><td>性能稳定！✅</td><td></td><td></td><td></td></tr><tr><td>空间复杂度 <td colspan="3"><code>O(n)</code></td></td><td>不是原地排序算法！❌</td><td></td><td></td><td></td></tr><tr><td>稳定性 <td colspan="4"> 稳定！✅ </td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p><img src="https://s2.loli.net/2023/11/26/keKQPUSW18izEv7.webp" alt="db7f892d3355ef74da9cd64aa926dc2b.webp"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 归并排序
 * 递归、分治
 * 时间： O(nlogn)
 * 空间： O(n)
 * 稳定排序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortMerge</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">_mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">_mergeSort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">,</span> <span class="token keyword">int</span> istart<span class="token punctuation">,</span> <span class="token keyword">int</span> iend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>iend<span class="token operator">-</span>istart<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> imid <span class="token operator">=</span> <span class="token punctuation">(</span>istart <span class="token operator">+</span> iend<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token comment">// divi</span>
            <span class="token function">_mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> istart<span class="token punctuation">,</span> imid<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">_mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> imid<span class="token punctuation">,</span> iend<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// merge</span>
            <span class="token keyword">int</span> it <span class="token operator">=</span> istart<span class="token punctuation">;</span>
            <span class="token keyword">int</span> il<span class="token operator">=</span>istart<span class="token punctuation">,</span> ir<span class="token operator">=</span>imid<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>il<span class="token operator">&lt;</span>imid <span class="token operator">&amp;&amp;</span> ir<span class="token operator">&lt;</span>iend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>il<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>ir<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    temp<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>il<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    il<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    temp<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>ir<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    ir<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                it<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            il <span class="token operator">=</span> <span class="token punctuation">(</span>il<span class="token operator">&lt;</span>imid<span class="token punctuation">)</span> <span class="token operator">?</span> il <span class="token operator">:</span> ir<span class="token punctuation">;</span>
            imid <span class="token operator">=</span> <span class="token punctuation">(</span>il<span class="token operator">&lt;</span>imid<span class="token punctuation">)</span> <span class="token operator">?</span> imid <span class="token operator">:</span> iend<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>il <span class="token operator">&lt;</span> imid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                temp<span class="token punctuation">[</span>it<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>il<span class="token punctuation">]</span><span class="token punctuation">;</span>
                il<span class="token operator">++</span><span class="token punctuation">;</span>
                it<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// copy</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>istart<span class="token operator">&lt;</span>iend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                arr<span class="token punctuation">[</span>istart<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>istart<span class="token punctuation">]</span><span class="token punctuation">;</span>
                istart<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">SortInsertion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortInsertion</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 22, 44, 99]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="快速排序-quicksort-✈️" tabindex="-1"><a class="header-anchor" href="#快速排序-quicksort-✈️" aria-hidden="true">#</a> 快速排序（Quicksort）✈️</h4>`,4),M=n("br",null,null,-1),P=n("br",null,null,-1),Q=n("br",null,null,-1),U={href:"https://algorithm-visualizer.org/divide-and-conquer/quicksort",target:"_blank",rel:"noopener noreferrer"},K=p(`<div class="custom-container tip"><p class="custom-container-title">提示</p><p>上述的“归并排序”和这里的“快速排序”都用到了“分治”思想。</p><table><thead><tr><th>归并排序</th><th>最好</th><th>最坏</th><th>平均</th><th>备注</th></tr></thead><tbody><tr><td>时间复杂度</td><td><code>O(n)</code></td><td><code>O(n^2)</code></td><td><code>O(nlogn)</code></td><td>性能时好时坏 ☁️</td></tr><tr><td>空间复杂度 <td colspan="3"><code>O(1)</code>（不算递归开销） </td></td><td>原地排序算法！✅</td><td></td><td></td><td></td></tr><tr><td>稳定性 <td colspan="4"> 不稳定！❌ </td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p><img src="https://s2.loli.net/2023/11/28/qpDMRZmOBhT3iea.png" alt="image.png"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>algorithm</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 快排 快速排序
 * 递归、分治
 * 时间：O(n)/O(nlogn)/O(n^2)
 * 空间：O(1)（不算递归开销）
 * 非稳定排序
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortQuick</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">SortFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">_quickSort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> istart<span class="token punctuation">,</span> <span class="token keyword">int</span> iend<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>iend<span class="token operator">-</span>istart<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> imid <span class="token operator">=</span> <span class="token function">_partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> istart<span class="token punctuation">,</span> iend<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">_quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> istart<span class="token punctuation">,</span> imid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">_quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> imid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> iend<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">_partition</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> il<span class="token punctuation">,</span> <span class="token keyword">int</span> ir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> iraw <span class="token operator">=</span> ir<span class="token punctuation">;</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> il<span class="token punctuation">;</span>
        <span class="token class-name">T</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>iraw<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>il<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>ir<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// swap -&gt; i值往前放</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                index<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index<span class="token punctuation">,</span> iraw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// System.out.println(Arrays.toString(arr)); // debug usefully</span>
        <span class="token keyword">return</span> index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">SortQuick</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> function <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortQuick</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        function<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 22, 44, 99]</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="堆排序" tabindex="-1"><a class="header-anchor" href="#堆排序" aria-hidden="true">#</a> 堆排序</h4><p>todo 大顶堆、小顶堆</p><h4 id="线性排序-桶排序" tabindex="-1"><a class="header-anchor" href="#线性排序-桶排序" aria-hidden="true">#</a> 线性排序 - 桶排序</h4><p>todo https://time.geekbang.org/column/article/42038</p><h4 id="线性排序-计数排序" tabindex="-1"><a class="header-anchor" href="#线性排序-计数排序" aria-hidden="true">#</a> 线性排序 - 计数排序</h4><p>todo https://time.geekbang.org/column/article/42038</p><h4 id="线性排序-基数排序" tabindex="-1"><a class="header-anchor" href="#线性排序-基数排序" aria-hidden="true">#</a> 线性排序 - 基数排序</h4><p>todo https://time.geekbang.org/column/article/42038</p><h3 id="算法-查找" tabindex="-1"><a class="header-anchor" href="#算法-查找" aria-hidden="true">#</a> 算法 - 查找</h3><h4 id="二分查找-binary-search" tabindex="-1"><a class="header-anchor" href="#二分查找-binary-search" aria-hidden="true">#</a> 二分查找（Binary-Search）</h4>`,13),H=n("br",null,null,-1),W=n("br",null,null,-1),Y={href:"https://algorithm-visualizer.org/divide-and-conquer/quicksort",target:"_blank",rel:"noopener noreferrer"},X=p(`<p>时间复杂度： <code>O(logn)</code></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>能使用二分查找的情况：</p><ol><li>只针对数组（随机访问）数据类型。</li><li>有序！</li></ol><p>局限：</p><ol><li>数据量不能太小 —— 牛刀杀鸡</li><li>数据量不能太大 —— 底层数据不连续（但是，如果是抽象的数据空间呢？）</li></ol></div><h5 id="二分查找问题" tabindex="-1"><a class="header-anchor" href="#二分查找问题" aria-hidden="true">#</a> 二分查找问题</h5><ul><li><p>如何编程实现“求一个数的平方根”？要求精确到小数点后 6 位。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>在求一个数的平方根问题上，用二分查找并不是最优的。（只是这里讲到，所以提到） <br> 最优方法是用牛顿弦切法求解平方根，代码如下供大家参考：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">double</span> number <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token comment">//待求平方根的数</span>
<span class="token keyword">double</span> xini <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//初始点</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>xini<span class="token operator">*</span>xini <span class="token operator">-</span> number <span class="token operator">&gt;</span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xini <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">+</span> xini<span class="token operator">*</span>xini<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>xini<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></li><li><p>快速定位IP对应的省份地址</p></li></ul><h3 id="算法-回溯算法" tabindex="-1"><a class="header-anchor" href="#算法-回溯算法" aria-hidden="true">#</a> 算法 - 回溯算法</h3><p>回溯通常用递归实现。</p><p>解决问题：</p>`,7),Z=n("li",null,"组合",-1),J=n("li",null,"切割",-1),G=n("li",null,"子集",-1),$=n("li",null,"排列",-1),nn={href:"https://www.nowcoder.com/practice/c76408782512486d91eea181107293b6",target:"_blank",rel:"noopener noreferrer"},sn=n("p",null,"深度搜索 DFS / 广度搜索 BFS",-1),an=n("h3",{id:"算法-贪心算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法-贪心算法","aria-hidden":"true"},"#"),s(" 算法 - 贪心算法")],-1),tn=n("a",{href:""},"跳跃游戏（LeedCode 55）",-1),pn={href:"https://www.bilibili.com/video/BV1MM411b7cq",target:"_blank",rel:"noopener noreferrer"},en=n("div",{class:"custom-container tip"},[n("p",{class:"custom-container-title"},"提示"),n("p",null,"贪心算法本质是先找每个阶段的 “局部最优”，从而推到 “全局最优”！"),n("p",null,[n("s",null,"贪心和动态规划非常相似，属于 “有局部最优解” 的动态规划！")]),n("p",null,[s("写贪心算法的核心是找到 “局部最优解”！但是，如何得知 “局部最优” 没有套路（因为需要数学证明）！ "),n("br"),s(" 💡如果判断使用贪心算法？如果发现局部最优好像能推出全局最优，就试一下！"),n("s",null,"至于数学如何证明，做题时不需要思考，样例通过了就行！")])],-1),on=n("h3",{id:"算法-动态规划",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法-动态规划","aria-hidden":"true"},"#"),s(" 算法 - 动态规划")],-1),cn=n("a",{href:""},"最大背包问题",-1),ln={href:"https://www.nowcoder.com/practice/17ba5b5df1fc49ca8d6cf8ea407b1972?tpId=182&tqId=34564&rp=1&ru=/exam/oj",target:"_blank",rel:"noopener noreferrer"},un=p('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>动态规划核心思想： “空间” 换 “时间” —— 通过避免重复计算来加速整体速度。</p><p>这个过程需要用到字典来保存中间计算结果，因此也称 “记忆化搜索”（recursion with memoization） / “带备忘录的递归”（memo） / “递归树的减枝”（Pruning）。</p><p><s>自低向上动态规划</s></p><p>动态规划求解步骤：</p><ol><li>设计状态</li><li>确定状态转移方程</li><li>确定初始状态 （状态存到hash表，便于快速访问）</li><li>执行状态转移</li><li>计算最终的解</li></ol><p>根据问题的维度可以划分为 “一维动态规划问题”、“二维动态规划问题”、... 一步步来。</p></div><h4 id="问题-递推" tabindex="-1"><a class="header-anchor" href="#问题-递推" aria-hidden="true">#</a> 问题：递推</h4>',2),rn={href:"https://www.nowcoder.com/practice/ee5d403c1172487f8c7915b3c3d924c6",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://www.nowcoder.com/practice/bfb2a2b3cdbd4bd6bba0d4dca69aa3f0",target:"_blank",rel:"noopener noreferrer"},kn=n("h4",{id:"问题-编辑距离-edit-distance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题-编辑距离-edit-distance","aria-hidden":"true"},"#"),s(" 问题：编辑距离（Edit-Distance）")],-1),mn={href:"https://www.nowcoder.com/practice/3959837097c7413a961a135d7104c314",target:"_blank",rel:"noopener noreferrer"},vn=n("p",null,"对比两个字符串，可以对字符串编辑（添加/替换/删除）。求最小编辑次数。",-1),bn=n("p",null,"参考： （按顺序，循序渐进，一个一个理解）",-1),hn={href:"https://www.bilibili.com/video/BV178411H7hV/",target:"_blank",rel:"noopener noreferrer"},wn={href:"https://www.bilibili.com/video/BV1ye4y1L7CQ/",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://www.bilibili.com/video/BV1we4y157wB/",target:"_blank",rel:"noopener noreferrer"},fn={href:"https://www.bilibili.com/video/BV1qv4y1q78f",target:"_blank",rel:"noopener noreferrer"},_n=n("h4",{id:"问题-背包问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#问题-背包问题","aria-hidden":"true"},"#"),s(" 问题：背包问题")],-1),yn={href:"https://www.bilibili.com/video/BV1cg411g7Y6/",target:"_blank",rel:"noopener noreferrer"},xn=n("li",null,"完全背包 —— n种物品，每种物品无限个",-1),Tn=n("li",null,"多重背包 —— n种物品，每种物品数量各不同",-1),jn=p('<h3 id="数据结构-跳表" tabindex="-1"><a class="header-anchor" href="#数据结构-跳表" aria-hidden="true">#</a> 数据结构 - 跳表</h3><p>Keywords: 二分查找 <br> Ref: 红黑树（常用来对比）</p><p>用来查找的数据结构，查找的时间复杂度<code>O(logn)</code></p><p><img src="https://s2.loli.net/2023/11/29/y9pEI4abQWxnO7w.png" alt="image.png"></p><h4 id="跳表问题" tabindex="-1"><a class="header-anchor" href="#跳表问题" aria-hidden="true">#</a> 跳表问题</h4><ul><li>为什么redis使用跳表来实现有序集合？而不是红黑树？</li></ul><h3 id="数据结构-树" tabindex="-1"><a class="header-anchor" href="#数据结构-树" aria-hidden="true">#</a> 数据结构 - 树</h3><p>todo</p>',8),Sn={href:"https://leetcode.cn/leetbook/read/data-structure-binary-tree/xo98qt/",target:"_blank",rel:"noopener noreferrer"},On={href:"https://www.bilibili.com/video/BV1vW4y1i7dn/",target:"_blank",rel:"noopener noreferrer"},Bn=n("p",null,"遍历",-1),Ln=n("ul",null,[n("li",null,[s("深度优先 "),n("ul",null,[n("li",null,"先序、中序、后序")])]),n("li",null,[s("广度优先 "),n("ul",null,[n("li",null,"队列")])])],-1),Vn=n("h4",{id:"avl树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#avl树","aria-hidden":"true"},"#"),s(" AVL树")],-1),In=n("p",null,"参考：",-1),qn={href:"https://www.bilibili.com/video/BV1dr4y1j7Mz/",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://www.bilibili.com/video/BV15a411D7tr/",target:"_blank",rel:"noopener noreferrer"},Cn=p('<p>每个节点中，左子节点和右子节点的高度差（平衡因子）不大于1。</p><p>插入/删除导致两边不平衡时，执行左旋/右旋/双旋操作，以平衡两边子树高度。</p><p>右旋： LL 1 （左边高，向右转）</p><p>左旋： RR 4（右边高，向左转）</p><p>左右双旋： LR 2</p><p>右左双旋： RL 3</p><h4 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h4><p>todo hashmap</p><p>高度差允许差1倍</p><p>问： java hashmap 为什么用红黑树，不用avl树</p><table><thead><tr><th>平衡二叉树</th><th>平衡度</th><th>调整频率</th><th>使用场景</th></tr></thead><tbody><tr><td>AVL树</td><td>高</td><td>高</td><td>查询多，增/删少的场景</td></tr><tr><td>红黑树</td><td>低</td><td>低</td><td>增/删频繁的场景</td></tr></tbody></table><h3 id="数据结构-堆" tabindex="-1"><a class="header-anchor" href="#数据结构-堆" aria-hidden="true">#</a> 数据结构 - 堆</h3><p>todo</p><h3 id="数据结构-图" tabindex="-1"><a class="header-anchor" href="#数据结构-图" aria-hidden="true">#</a> 数据结构 - 图</h3><p>图的遍历有两种：深度优先/广度优先</p>',15),Nn={href:"https://www.bilibili.com/video/BV1cK4y197oF/",target:"_blank",rel:"noopener noreferrer"},Rn=n("h4",{id:"遍历",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#遍历","aria-hidden":"true"},"#"),s(" 遍历")],-1),En=n("p",null,"图的遍历有两种策略",-1),Fn={href:"https://www.bilibili.com/video/BV1s5411M7vz/",target:"_blank",rel:"noopener noreferrer"},An=n("ul",null,[n("li",null,"队列")],-1),Dn={href:"https://www.bilibili.com/video/BV1py4y137rm/",target:"_blank",rel:"noopener noreferrer"},Mn=n("ul",null,[n("li",null,"栈")],-1),Pn=n("p",null,"有递归/栈两种实现",-1),Qn=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),s(" 参考")],-1),Un={href:"https://github.com/algorithm-visualizer/algorithm-visualizer",target:"_blank",rel:"noopener noreferrer"},Kn=n("li",null,"2023年11月28日 45k star",-1),Hn={href:"https://www.bilibili.com/video/BV1fA4y1o715/",target:"_blank",rel:"noopener noreferrer"},Wn=n("br",null,null,-1),Yn={href:"https://programmercarl.com/",target:"_blank",rel:"noopener noreferrer"},Xn={href:"https://oj.algomooc.com/",target:"_blank",rel:"noopener noreferrer"},Zn=n("li",null,[s("[x] 极客时间王争《数据结构与算法之美》 【本文图片来源之一】 "),n("ul",null,[n("li",null,[s("[x] "),n("s",null,"基础 （全是文字，太虚 or 我太菜）")]),n("li",null,"[ ] 实战")])],-1);function Jn(Gn,$n){const a=c("ExternalLinkIcon");return l(),i("div",null,[r,e(`

\`\`\`txt
数据结构
    数组 x
    链表 x
    栈 x
    队列 x
    散列表 x
    二叉树 x
    堆 x
    跳表
    图
    Trie 树
算法
    递归 x
    排序 x
      冒泡/插入 x
      归并/快速 x
    二分查找
    搜索
    哈希算法
    贪心算法
    分治算法
    回溯算法
    动态规划
    字符串匹配算法
\`\`\`

`),d,n("ol",null,[k,n("li",null,[m,v,n("blockquote",null,[n("p",null,[s("约瑟夫问题 "),n("a",b,[s("https://zh.wikipedia.org/wiki/约瑟夫斯问题"),t(a)])])])]),h]),w,n("ol",null,[n("li",null,[g,n("p",null,[s("使用快慢两个指针找到链表中点，慢指针每次前进一步，快指针每次前进两步。在慢指针前进的过程中，同时修改其 next 指针，使得链表前半部分反序。最后比较中点两侧的链表是否相等。 "),f,s(" 时间复杂度：O(n) "),_,s(" 空间复杂度：O(1) "),y,n("a",x,[s("https://github.com/andavid/leetcode-java/blob/master/note/234/README.md"),t(a)])])])]),T,n("ul",null,[j,S,n("li",null,[s("表达式求值：中缀、后缀、逆波兰（RPN） "),n("a",O,[s("https://www.nowcoder.com/practice/9566499a2e1546c0a257e885dfdbf30d"),t(a)]),B])]),L,n("p",null,[s("排序算法时间复杂度： "),n("a",V,[s("https://blog.csdn.net/LawssssCat/article/details/102798623"),t(a)])]),I,q,z,n("p",null,[s("online visual demo: "),n("a",C,[s("https://algorithm-visualizer.org/brute-force/bubble-sort"),t(a)])]),N,n("p",null,[s("online visual demo: "),n("a",R,[s("https://algorithm-visualizer.org/brute-force/insertion-sort"),t(a)])]),E,e(' <Badge type="tip" text="快速" vertical="top" /> '),n("p",null,[s("Keywords: 分治、递归"),F,s(" online visual demo: "),n("a",A,[s("https://algorithm-visualizer.org/divide-and-conquer/merge-sort"),t(a)])]),D,n("p",null,[s("Alias: 快排 "),M,s(" Keywords: 分治、递归"),P,s(" Rel: 二分查找（类似） "),Q,s(" online visual demo: "),n("a",U,[s("https://algorithm-visualizer.org/divide-and-conquer/quicksort"),t(a)])]),K,n("p",null,[s("Alias: 折半查找 "),H,s(" Keywords: 分治、递归 "),W,s(" online visual demo: "),n("a",Y,[s("https://algorithm-visualizer.org/divide-and-conquer/quicksort"),t(a)])]),X,n("ul",null,[Z,J,G,$,n("li",null,[s("棋盘： "),n("a",nn,[s("N皇后"),t(a)]),s("、数独")])]),sn,an,n("p",null,[s("如： "),tn,s("、"),n("a",pn,[s("分发饼干"),t(a)])]),en,on,n("p",null,[s("如： "),cn,s("、"),n("a",ln,[s("最大子序列"),t(a)])]),un,n("p",null,[s("如： "),n("a",rn,[s("斐波那契数列"),t(a)]),s("、"),n("a",dn,[s("青蛙跳台阶"),t(a)])]),kn,n("p",null,[n("a",mn,[s("https://www.nowcoder.com/practice/3959837097c7413a961a135d7104c314"),t(a)])]),vn,bn,n("ol",null,[n("li",null,[n("a",hn,[s("LeetCode：718.最长重复子数组"),t(a)])]),n("li",null,[n("a",wn,[s("LeetCode：1143.最长公共子序列"),t(a)])]),n("li",null,[n("a",gn,[s("LeetCode：583.两个字符串的删除操作"),t(a)])]),n("li",null,[n("a",fn,[s("LeetCode：72.编辑距离"),t(a)])])]),_n,n("ul",null,[n("li",null,[s("01背包 —— n种物品，每种物品1个 "),n("a",yn,[s("https://www.bilibili.com/video/BV1cg411g7Y6/"),t(a)])]),xn,Tn]),jn,n("ul",null,[n("li",null,[s("题： "),n("a",Sn,[s("LeetCode：106.从中序与后序遍历序列构造二叉树"),t(a)]),s(" 讲解： "),n("a",On,[s("代码随想录"),t(a)])])]),Bn,Ln,Vn,In,n("ul",null,[n("li",null,[s("AVL 新增 "),n("a",qn,[s("https://www.bilibili.com/video/BV1dr4y1j7Mz/"),t(a)])]),n("li",null,[s("AVL 删除 "),n("a",zn,[s("https://www.bilibili.com/video/BV15a411D7tr/"),t(a)])])]),Cn,n("p",null,[s("定义： "),n("a",Nn,[s("邻接表"),t(a)])]),Rn,En,n("ul",null,[n("li",null,[n("a",Fn,[s("广度遍历 BFS"),t(a)]),An]),n("li",null,[n("a",Dn,[s("深度遍历 DFS"),t(a)]),Mn])]),Pn,Qn,n("ul",null,[n("li",null,[s("algorithm-visualizer - 算法可视化项目 🎆 "),n("ul",null,[n("li",null,[s("github - "),n("a",Un,[s("https://github.com/algorithm-visualizer/algorithm-visualizer"),t(a)])]),Kn])]),n("li",null,[s("B站|《代码随想录》 - "),n("a",Hn,[s("https://www.bilibili.com/video/BV1fA4y1o715/"),t(a)]),s(),Wn,s(" 博客|《代码随想录》 - "),n("a",Yn,[s("https://programmercarl.com/"),t(a)])]),n("li",null,[s("模拟题 - "),n("a",Xn,[s("https://oj.algomooc.com/"),t(a)])]),Zn])])}const ss=o(u,[["render",Jn],["__file","index.html.vue"]]);export{ss as default};
