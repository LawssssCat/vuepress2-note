import{_ as p,r as o,o as c,c as i,a as n,b as s,d as t,e}from"./app-04e6f892.js";const l={},u=n("h2",{id:"版本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#版本","aria-hidden":"true"},"#"),s(" 版本")],-1),d=n("p",null,"参考：",-1),r={href:"https://waylau.com/running-junit5-tests-with-maven/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.liujiajia.me/2021/5/14/why-exclude-junit-vintage-engine-by-default",target:"_blank",rel:"noopener noreferrer"},v=e(`<h3 id="junit5" tabindex="-1"><a class="header-anchor" href="#junit5" aria-hidden="true">#</a> Junit5</h3><p>相比较JUnit 4而言，JUnit 5一个比较大的改变是JUnit 5拥有与JUnit 4不同的全新的API。JUnit 5分成了三部分：</p><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p><ul><li><strong>JUnit Platform</strong> 【基础】 —— 是在JVM上启动测试框架的基础。 它还定义了TestEngine API，用于开发在平台上运行的测试框架。 此外，该JUnit Platform还提供了一个控制台启动器（用于从命令行启动该平台）和一个基于JUnit 4的运行器，用于在基于JUnit 4的环境中在该平台上运行任何TestEngine。 流行的IDE（IntelliJ IDEA，Eclipse，NetBeans和Visual Studio Code等）和构建工具（Gradle，Maven和Ant等）中也存在对JUnit平台的一流支持。</li><li><strong>JUnit Jupiter</strong> 【Junit5】 —— 是新编程模型和扩展模型的组合，用于在JUnit 5中编写测试和扩展。Jupiter子项目提供了一个TestEngine，用于在平台上运行基于Jupiter的测试。</li><li><strong>JUnit Vintage</strong> 【Junit4】 —— 提供了一个TestEngine，用于在平台上运行基于JUnit 3和基于JUnit 4的测试。</li></ul><p>简单的来说： 只使用 Junit5 就使用 JUnit Jupiter；需要向上兼容则使用 JUnit Jupiter + JUnit Vintage；</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>Junit5 的 <code>@Test</code> 在 <code>org.junit.jupiter.api.*</code> 包下，别选择错了，否则新版的注释将不生效！</p></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>对于 spring-boot-starter-test 的 2.2.x 和 2.3.x 的用户，如果只想使用 Junit5 则需要像如下方法把 JUnit Vintage 排除。 因为这两个版本同时包含 JUnit Jupiter 和 JUnit Vintage，如果不排除的话，一个不小心就会把引用写错。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Test --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><p>每个 Test Class 执行一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ClassRule</span>
<span class="token annotation punctuation">@ClassBefore</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> methods <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token annotation punctuation">@ClassAfter</span>
<span class="token annotation punctuation">@ClassRule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个 Test Method 执行一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Rule</span>
<span class="token annotation punctuation">@Before</span>
<span class="token annotation punctuation">@Test</span>
<span class="token annotation punctuation">@After</span>
<span class="token annotation punctuation">@Rule</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关于-extendwith-springextension-class-注解的解释" tabindex="-1"><a class="header-anchor" href="#关于-extendwith-springextension-class-注解的解释" aria-hidden="true">#</a> 关于 <code>@ExtendWith(SpringExtension.class)</code> 注解的解释</h2>`,13),g={href:"https://blog.csdn.net/ll1042668699/article/details/128069286",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">BirdConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CatConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">DogConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">ConfigUnitTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">givenImportedBeans_whenGettingEach_shallFindIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertThatBeanExists</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThatBeanExists</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertThatBeanExists</span><span class="token punctuation">(</span><span class="token string">&quot;bird&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Bird</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">assertThatBeanExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">assertTrue</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于-extendwith-注解" tabindex="-1"><a class="header-anchor" href="#关于-extendwith-注解" aria-hidden="true">#</a> 关于 <code>@ExtendWith</code> 注解</h3><p><code>@ExtendWith</code>是Junit5新引入的注解, 用于扩展test能力, 通过提供一系列的扩展点(extension point)来支持用户在执行具体的单测实例前后去做一些环境准备等工作, 这部分工作与单测内容无关, 但对于单测的正常执行却至关重要, 比如Spring单测需要启动一个spring容器, 完成指定bean的构建; 或执行测试数据库前进行连接数据库等工作。</p><p>扩展点如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>实现ExecutionCondition接口 —— 根据参数判断该单测是否进行执行, 比如根据配置文件application.properties的环境参数env==test 指定单测执行的前提条件.

单测实例生命周期运行中的回调函数： 
BeforeAllCallback —— 单测实例构建前
BeforeAll
BeforeEachCallback —— 所有测试方法执行前
BeforeEach
BeforeTestExecutionCallback —— 单个测试方法执行前
Test
AfterTestExecutionCallback —— 单个测试方法执行后
AfterEach
AfterEachCallback —— 所有测试方法执行后
AfterAll
AfterAllCallback —— 单测实例构建后
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关于-springextension-class-实现类" tabindex="-1"><a class="header-anchor" href="#关于-springextension-class-实现类" aria-hidden="true">#</a> 关于 <code>SpringExtension.class</code> 实现类</h3><p>SpringExtension是对 <code>@ExtendWith</code> 注解提供的扩展点的一种实现, 用来将Spring Test Framework 集成到 Junit5 测试环境中, 其类定义实现了生命周期回调/测试实例后处理/参数解析等扩展点的接口，通过这些扩展点, 完成Spring的TestContext构建与初始化, 并将指定的类的bean的构建。</p><p>todo 具体扩展了什么地方，做了什么</p><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解" aria-hidden="true">#</a> 常用注解</h2><p>Before / After</p><p>每个方法前执行 —— @Before、@BeforeEach（Junit5后改名为这个，原方法名依然可用）</p><p>测试类中所有方法执行前执行 —— @BeforeClass、@BeforeAll（Junit5后改名为这个，原方法名依然可用）</p><h3 id="rule" tabindex="-1"><a class="header-anchor" href="#rule" aria-hidden="true">#</a> <code>@Rule</code></h3><p>修饰方法前后的处理器。</p><p>e.g.</p><p>下面例子的处理器 ExceptedException 可以处理方法后抛出的异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJunit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaTransferTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Rule</span>
    <span class="token keyword">public</span> <span class="token class-name">ExceptedException</span> exceptedExceptionRule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExceptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
    <span class="token annotation punctuation">@After</span> <span class="token keyword">void</span> <span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTransfer_GivenExceptionOccuredTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DaTransfer</span> spy <span class="token operator">=</span> <span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>daTransfer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        spy<span class="token punctuation">.</span><span class="token function">setHaPoolManager</span><span class="token punctuation">(</span>haPoolManager<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">when</span><span class="token punctuation">(</span>haPoolManager<span class="token punctuation">.</span><span class="token function">getSlotHashSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>haPoolManager<span class="token punctuation">.</span><span class="token function">getBucketHa</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid bucket!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        exceptedExceptionRule<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        spy<span class="token punctuation">.</span><span class="token function">doTransfer</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function b(h,f){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,d,n("ul",null,[n("li",null,[n("a",r,[s("在Maven项目中运行JUnit 5测试用例"),t(a)])]),n("li",null,[n("a",k,[s("为什么默认排除 junit-vintage-engine ？"),t(a)])])]),v,n("p",null,[s("参考： "),n("a",g,[s("解析“@ExtendWith注解“"),t(a)])]),m])}const J=p(l,[["render",b],["__file","junit.html.vue"]]);export{J as default};
