import{_ as a,o as e,c as n,e as s}from"./app-04e6f892.js";const i={},t=s(`<h2 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> Process</h2><p>通过Process可以在Java进程内运行其他进程。</p><p>常用字符</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>进程命令 command
工作目录 cwd current working directory
环境变量 env environment
标准输入输出 redirectInput/Output/Error
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Process</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ProcessBuilder</span>
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Runtime</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行过程" tabindex="-1"><a class="header-anchor" href="#运行过程" aria-hidden="true">#</a> 运行过程</h3><p>通过开启一个子进程执行命令。如果Java进程后续的执行依赖于子进程的执行结果，则等待子进程结束，否则可以并发执行。</p><p><img src="https://s2.loli.net/2024/01/07/H4XSN6s17VTWvco.png" alt="image.png"></p><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h3><p><img src="https://s2.loli.net/2024/01/07/Ds3jJ4uWfcTE6g5.png" alt="image.png"></p><h4 id="管道-pipe-默认" tabindex="-1"><a class="header-anchor" href="#管道-pipe-默认" aria-hidden="true">#</a> 管道（Pipe）（默认）</h4><p><img src="https://s2.loli.net/2024/01/07/ieoROjkrauv6STx.png" alt="image.png"></p><h4 id="继承-inherit" tabindex="-1"><a class="header-anchor" href="#继承-inherit" aria-hidden="true">#</a> 继承（Inherit）</h4><p>使用标准输入输出</p><p><img src="https://s2.loli.net/2024/01/07/cKw9UmxVM8uTn1z.png" alt="image.png"></p><h4 id="文件-file" tabindex="-1"><a class="header-anchor" href="#文件-file" aria-hidden="true">#</a> 文件（File）</h4><p><img src="https://s2.loli.net/2024/01/07/DSgiUOCHREFA6KV.png" alt="image.png"></p><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>todo 引入测试代码！</p>`,20),r=[t];function c(p,d){return e(),n("div",null,r)}const o=a(i,[["render",c],["__file","jdk-process.html.vue"]]);export{o as default};
