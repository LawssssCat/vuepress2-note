import{_ as l,r as p,o,c,a as n,b as s,d as a,w as d,e}from"./app-04e6f892.js";const u={},r={class:"custom-container danger"},k=e('<p class="custom-container-title">警告</p><p>经过各种踩坑，得出以下总结：</p><p>使用 pyinstaller 把 python 打包成一个可执行文件属于脱裤子放屁。</p><p><strong>理由</strong>：</p><ol><li>跨平台兼容性差： 由于语言的特性 pyinstaller 打包出来的二进制依赖系统的动态库。这导致程序可能可以跨平台跑，单大概率不能跑。要么动态库缺失，要么GLIBC版本要求太高，系统没有相关函数集。</li><li>破坏项目结构： 打包后的程序依赖的文件路径会改变，要么在 <code>_internal</code> 中，要么在解压的 <code>/tmp</code> 临时目录中。处理这种路径的变化需要添加额外的代码。如果使用的第三方库没有这种兼容代码，则整个三方库无法选用（除非你自己开分支维护）。</li></ol><p><strong>解决方案</strong>：</p><p>很简单，直接使用 python 跑 py 文件即可，根本无需把 python 项目通过 pyinstaller 打包成可执行文件再跑程序。 环境需要安装 python 环境？ 直接编译一个静态的 python 可执行文件，加上 venv 打包依赖到 site-packages 环境就能确保代码跨系统运行。 再交叉编译其他架构的 python 可执行文件即可跨架构运行。🎉</p>',7),v=n("h3",{id:"简单使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简单使用","aria-hidden":"true"},"#"),s(" 简单使用")],-1),m=n("p",null,"参考：",-1),b={href:"https://www.askpython.com/python/examples/compiling-applications-static-binary",target:"_blank",rel:"noopener noreferrer"},h=e(`<p>编译 py 文件生成 exe 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装工具</span>
pip <span class="token function">install</span> PyInstaller
<span class="token comment"># 生成 exe 文件</span>
pyinstaller <span class="token parameter variable">-F</span> stusystem.py <span class="token comment"># stusystem.exe</span>

<span class="token comment"># pyInstaller -F -w -p /dir1/;/dir2/ -i /dir3/icon.ico ***.py</span>
<span class="token comment"># -F/--onefile</span>
<span class="token comment"># -F 表示生成单一的exe文件</span>
<span class="token comment">#    💡虽然生成了单一文件，但实际上还是压缩包形式存储全部文件，通过特殊方法可以解压 | todo 解压生成的单一文件</span>
<span class="token comment">#    ⚠️单文件模式下，启动程序时会先将可执行文件进行解压缩到 /temp 目录 下，再执行。</span>
<span class="token comment">#       所以被打包进去的数据文件在被解压的路径下，所以如果是在运行的路径下（即启动程序的目录下）搜索文件是找不到数据文件的！</span>
<span class="token comment"># -w 表示生成的exe文件执行时去掉背后的dos窗口</span>
<span class="token comment"># -p pyinstaller 手动提供包的位置（dir1，dir2），以分号隔开&quot;;&quot;</span>
<span class="token comment"># -i 加入图标</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pyinstaller present_fasttext_txt.spec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="例子-简单flask服务" tabindex="-1"><a class="header-anchor" href="#例子-简单flask服务" aria-hidden="true">#</a> 例子： 简单flask服务</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;
初始化：所有的Flask都必须创建程序实例，
web服务器使用wsgi协议，把客户端所有的请求都转发给这个程序实例
程序实例是Flask的对象，一般情况下用如下方法实例化
Flask类只有一个必须指定的参数，即程序主模块或者包的名字，__name__是系统变量，该变量指的是本py文件的文件名
&#39;&#39;&#39;</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">import</span> datetime

server<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@server<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/time&#39;</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">get_time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    now<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#把当前时间转换成字符串</span>
    <span class="token keyword">return</span> <span class="token string">&quot;当前的时间是：%s&quot;</span><span class="token operator">%</span>now

server<span class="token punctuation">.</span>run<span class="token punctuation">(</span>port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 直接运行</span>
pip3 <span class="token function">install</span> flask
python3 app.py <span class="token operator">&amp;</span>
<span class="token function">curl</span> <span class="token number">127.0</span>.0.1:8888
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 编译运行</span>
pyinstaller app.py
./dist/app/app 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="问题-资源文件的路径" tabindex="-1"><a class="header-anchor" href="#问题-资源文件的路径" aria-hidden="true">#</a> 问题： 资源文件的路径</h4><p>在 py 中，资源文件放在项目根目录下，所以调用的时候直接用的文件名。</p><p>但打包成 exe 文件的后，资源文件会在 dist 文件夹下搜索文件，从而导致资源文件找不到的问题。</p><p>代码片段1：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os<span class="token punctuation">,</span> sys
 
<span class="token keyword">def</span> <span class="token function">resource_path</span><span class="token punctuation">(</span>relative_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    定义一个读取相对路径的函数
      &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">&quot;_MEIPASS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        base_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>_MEIPASS
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_path<span class="token punctuation">,</span> relative_path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 前</span>
classifier1 <span class="token operator">=</span> fasttext<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span><span class="token string">&quot;comment_fasttext_isinv.model.bin&quot;</span>， label_prefix<span class="token operator">=</span><span class="token string">&#39;__label__&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 后</span>
classifier1 <span class="token operator">=</span> fasttext<span class="token punctuation">.</span>load_model<span class="token punctuation">(</span>resource_path<span class="token punctuation">(</span><span class="token string">&quot;comment_fasttext_isinv.model.bin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_prefix<span class="token operator">=</span><span class="token string">&#39;__label__&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码片段2：不能在代码中直接使用相对路径调用文件</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 先获取当前运行时临时目录路径</span>
<span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">&#39;frozen&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    basedir <span class="token operator">=</span> sys<span class="token punctuation">.</span>_MEIPASS
<span class="token keyword">else</span><span class="token punctuation">:</span>
    basedir <span class="token operator">=</span> path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>
<span class="token comment"># 使用 os.path.join() 方法，将 临时目录路径与文件相对路径拼接</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>basedir<span class="token punctuation">,</span> <span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spac-文件" tabindex="-1"><a class="header-anchor" href="#spac-文件" aria-hidden="true">#</a> spac 文件</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># -*- mode: python -*-</span>
 
block_cipher <span class="token operator">=</span> <span class="token boolean">None</span>
 
 
a <span class="token operator">=</span> Analysis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;present_fasttext_txt.py&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             pathex<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;/home/km/PycharmProjects/fasttext&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             binaries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             <span class="token comment"># 类型：tuple，元素是两个字符串。第一个为文件源路径；第二个为文件生成路径（相对于生成的程序的路径）</span>
             datas<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;comment_fasttext_isinv.model.bin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;comment_fasttext_isneg.model.bin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;comment_fasttext_issug.model.bin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;comment_fasttext_isbug.model.bin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;comment_fasttext_ispraise.model.bin&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             hiddenimports<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;fasttext.model&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             hookspath<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             runtime_hooks<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             excludes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
             win_no_prefer_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
             win_private_assemblies<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
             cipher<span class="token operator">=</span>block_cipher<span class="token punctuation">)</span>
pyz <span class="token operator">=</span> PYZ<span class="token punctuation">(</span>a<span class="token punctuation">.</span>pure<span class="token punctuation">,</span> a<span class="token punctuation">.</span>zipped_data<span class="token punctuation">,</span>
             cipher<span class="token operator">=</span>block_cipher<span class="token punctuation">)</span>
exe <span class="token operator">=</span> EXE<span class="token punctuation">(</span>pyz<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>scripts<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>binaries<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>zipfiles<span class="token punctuation">,</span>
          a<span class="token punctuation">.</span>datas<span class="token punctuation">,</span>
          name<span class="token operator">=</span><span class="token string">&#39;present_fasttext_txt&#39;</span><span class="token punctuation">,</span>
          debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
          strip<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
          upx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
          runtime_tmpdir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>
          console<span class="token operator">=</span><span class="token boolean">True</span> <span class="token punctuation">)</span>

<span class="token comment"># coll是用来在dist目录下生成程序文件夹的</span>
<span class="token comment"># 💡如果加了 -F参数，生成的spac文件中没有coll内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pyinstaller分步生成可执行文件" tabindex="-1"><a class="header-anchor" href="#pyinstaller分步生成可执行文件" aria-hidden="true">#</a> pyinstaller分步生成可执行文件</h4><p>在一些其他情况下，通过修改spec文件，自定义可执行文件的生成过程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pyi-makespec options name.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21),g={href:"https://pythonhosted.org/PyInstaller/man/pyi-makespec.html?highlight=pyi",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pyi-makespec present_fasttext_txt.py <span class="token parameter variable">-F</span> --hidden-import fasttext.model
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="问题-打包报-enable-shared-错误" tabindex="-1"><a class="header-anchor" href="#问题-打包报-enable-shared-错误" aria-hidden="true">#</a> 问题： 打包报 enable-shared 错误</h3><p>参考： https://blog.csdn.net/zhouguoqionghai/article/details/103102724</p><p>编译安装 python</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://www.python.org/ftp/python/3.4.0/Python-3.4.0.tgz
<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> Python-3.4.0.tgz
<span class="token builtin class-name">cd</span> Python-3.4.0
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 pyinstaller 将所有依赖打包到一个文件当中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pyinstaller <span class="token parameter variable">--console</span> <span class="token parameter variable">--onefile</span> script.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果报错</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>* On Debian/Ubuntu, you would need to <span class="token function">install</span> Python development packages
  * <span class="token function">apt-get</span> <span class="token function">install</span> python3-dev
  * <span class="token function">apt-get</span> <span class="token function">install</span> python-dev
* If you&#39;re building Python by yourself, please rebuild your Python with <span class="token variable"><span class="token variable">\`</span>--enable-shared<span class="token variable">\`</span></span> <span class="token punctuation">(</span>or, <span class="token variable"><span class="token variable">\`</span>--enable-framework<span class="token variable">\`</span></span> on Darwin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新编译安装 python</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./configure --enable-shared
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>报错： <code>error while loading shared libraries： </code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 搜动态库位置</span>
$ <span class="token function">find</span> /usr <span class="token parameter variable">-name</span> <span class="token string">&#39;libpython3.6m.so.1.0&#39;</span>
/usr/local/lib

<span class="token comment"># ldconfig 命令用来管理链接器的动态库搜索路径，默认的是 /lib 和 /usr/lib 已经 /etc/ld.so.conf 配置文件中包含的目录</span>
<span class="token comment"># 该路径不在连链接器默认的动态库搜索范围里，可以 ldconfig -v | grep python 看不到该动态库。</span>
<span class="token comment"># 若该库不在链接器的搜索范围内，执行 ldd $(which python3) 可查看到该库指向为 not found.</span>
$ ldd <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> python3<span class="token variable">)</span></span> 
        linux-vdso.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span>0x00007ffd609e2000<span class="token punctuation">)</span>
        libpython3.4m.so.1.0 <span class="token operator">=</span><span class="token operator">&gt;</span> not found
        libpthread.so.0 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libpthread.so.0 <span class="token punctuation">(</span>0x00007f6e934cf000<span class="token punctuation">)</span>
        libdl.so.2 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libdl.so.2 <span class="token punctuation">(</span>0x00007f6e932ca000<span class="token punctuation">)</span>
        libutil.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libutil.so.1 <span class="token punctuation">(</span>0x00007f6e930c7000<span class="token punctuation">)</span>
        libm.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libm.so.6 <span class="token punctuation">(</span>0x00007f6e92e43000<span class="token punctuation">)</span>
        libc.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib64/libc.so.6 <span class="token punctuation">(</span>0x00007f6e92aae000<span class="token punctuation">)</span>
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007f6e93ba2000<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方式一： ⚠️需要管理员权限</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;/usr/local/lib&#39;</span> <span class="token operator">&gt;&gt;</span> /etc/ld.so.conf <span class="token comment"># 将路径写入动态链接库配置</span>
ldconfig <span class="token comment"># 刷新一下缓存</span>

<span class="token comment"># 方式二：临时的替代方法就是修改预定义变量</span>
<span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/opt/python/lib
<span class="token builtin class-name">export</span> LD_LIBRARY_PATH <span class="token comment"># 得子进程当中能够使用</span>

<span class="token comment"># 方式三： 在编译配置时就指定动态链接库位置</span>
./configure --enable-shared <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/opt/python <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span>-Wl,-rpath<span class="token operator">=</span>/opt/python/lib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题-运行时-no-module-named-matplotlib-backends-backend-tkagg" tabindex="-1"><a class="header-anchor" href="#问题-运行时-no-module-named-matplotlib-backends-backend-tkagg" aria-hidden="true">#</a> 问题： 运行时 No module named &#39;matplotlib.backends.backend_tkagg&#39;</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>E:<span class="token punctuation">\\</span>0E207<span class="token punctuation">\\</span>soft<span class="token punctuation">\\</span>dist<span class="token operator">&gt;</span>.<span class="token punctuation">\\</span>dist<span class="token punctuation">\\</span>cellsim
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:
  File <span class="token string">&quot;CellSim.pyw&quot;</span>, line <span class="token number">6</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
  File <span class="token string">&quot;F:\\python35-32\\lib\\site-packages\\pyinstaller-3.2.1-py3.5.egg\\PyInstaller\\loader\\pyimod03_importers.py&quot;</span>, line <span class="token number">389</span>, <span class="token keyword">in</span> load_module
    exec<span class="token punctuation">(</span>bytecode, module.__dict__<span class="token punctuation">)</span>
  File <span class="token string">&quot;Lib\\site-packages\\matplotlib\\pyplot.py&quot;</span>, line <span class="token number">114</span>, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">&gt;</span>
  File <span class="token string">&quot;Lib\\site-packages\\matplotlib<span class="token entity" title="\\b">\\b</span>ackends\\__init__.py&quot;</span>, line <span class="token number">32</span>, <span class="token keyword">in</span> pylab_setup
ImportError: No module named <span class="token string">&#39;matplotlib.backends.backend_tkagg&#39;</span>
Failed to execute script CellSim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种原因： 一个是依赖包没装，一个是依赖没被pyinstaller识别</p><ul><li><p>对于： 依赖包没装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>下载依赖，重新编译
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>对于： 依赖没被pyinstaller识别</p><p>加参数 <code>--hidden-import matplotlib.backends.backend_tkagg</code></p></li></ul><h3 id="问题-glibc-issue-静态编译" tabindex="-1"><a class="header-anchor" href="#问题-glibc-issue-静态编译" aria-hidden="true">#</a> 问题： GLIBC issue / 静态编译</h3><p>::: waning PyInstaller + StaticX 实测有问题。 todo 理解、解决方案 :::</p><p>参考：</p><ul><li>GLIBC issue | https://github.com/orgs/pyinstaller/discussions/5669</li><li>Python 编译「静态」可执行文件 (PyInstaller + StaticX) | https://hydrotho.github.io/Compiling-Python-Application-Into-Static-Binary-Using-PyInstaller-And-StaticX/</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打包项目为可执行文件（ELF），存放放在dist中 </span>
pyinstaller main.py <span class="token comment"># 多文件</span>
<span class="token comment"># or</span>
pyinstaller main.py <span class="token parameter variable">--onefile</span> <span class="token comment"># 单文件</span>
pyinstaller <span class="token parameter variable">-F</span> main.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面命令，可以将项目打包为可执行文件（ELF）。</p><p>但可执行文件仍然可能在其他机器（甚至同架构、同系统的机器）上运行报错。因为，其生成的可执行文件是动态链接的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ldd dist/app/app 
        linux-vdso.so.1 <span class="token punctuation">(</span>0x00007ffd52bf8000<span class="token punctuation">)</span>
        libdl.so.2 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libdl.so.2 <span class="token punctuation">(</span>0x00007f520b7dc000<span class="token punctuation">)</span>
        libz.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libz.so.1 <span class="token punctuation">(</span>0x00007f520b7c0000<span class="token punctuation">)</span>
        libpthread.so.0 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libpthread.so.0 <span class="token punctuation">(</span>0x00007f520b7bb000<span class="token punctuation">)</span>
        libc.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libc.so.6 <span class="token punctuation">(</span>0x00007f520b592000<span class="token punctuation">)</span>
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007f520b7e9000<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这种可执行文件不是完全静态的，所以它依赖于系统的 libc。 在 Linux 下，GLIBC 的 ABI 是向后兼容的，但不是向前兼容的。 因此，如果你用较新的 GLIBC 链接，你就不能在较旧的系统上运行编译好的可执行文件。</p><p>一种解决方法是在最老的系统上编译 Python 解释器及其模块，从而使用旧的 GLIBC 版本，但这必然引入安全问题。</p><p>彻底解决的方法是将 Python 应用程序编译成「静态」可执行文件。 这里，使用 StaticX 工具：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-U</span> staticx
staticx <span class="token operator">&lt;</span>动态可执行文件路径<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>静态可执行文件路径<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ staticx dist/app/app dist/app/app-staticx
$ <span class="token function">file</span> dist/app/app
dist/app/app: ELF <span class="token number">64</span>-bit LSB executable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>4900f1057c817d78f6abf8c33793107b79dcd1a7, <span class="token keyword">for</span> GNU/Linux <span class="token number">2.6</span>.32, stripped
$ ldd dist/app/app
        linux-vdso.so.1 <span class="token punctuation">(</span>0x00007ffec835e000<span class="token punctuation">)</span>
        libdl.so.2 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libdl.so.2 <span class="token punctuation">(</span>0x00007f19f2be6000<span class="token punctuation">)</span>
        libz.so.1 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libz.so.1 <span class="token punctuation">(</span>0x00007f19f2bca000<span class="token punctuation">)</span>
        libpthread.so.0 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libpthread.so.0 <span class="token punctuation">(</span>0x00007f19f2bc5000<span class="token punctuation">)</span>
        libc.so.6 <span class="token operator">=</span><span class="token operator">&gt;</span> /lib/x86_64-linux-gnu/libc.so.6 <span class="token punctuation">(</span>0x00007f19f299c000<span class="token punctuation">)</span>
        /lib64/ld-linux-x86-64.so.2 <span class="token punctuation">(</span>0x00007f19f2bf3000<span class="token punctuation">)</span>
$ <span class="token function">file</span> dist/app/app-staticx 
dist/app/app-staticx: ELF <span class="token number">64</span>-bit LSB executable, x86-64, version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, statically linked, with debug_info, not stripped
$ ldd dist/app/app-staticx
        not a dynamic executable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>除了安装 StaticX 包，还需要确保已安装如下命令：</p><ul><li><code>ldd</code></li><li><code>readelf</code></li><li><code>objcopy</code></li><li><code>patchelf</code></li></ul><p>通过 <code>command -v &lt;COMMAND&gt;</code> 来检查命令是否存在。</p></div><div class="custom-container danger"><p class="custom-container-title">警告</p><p><strong>存在的问题</strong></p><p>StaticX 生成的「静态」可执行文件在运行时将在系统的 <code>/tmp/</code> 路径下创建随机临时文件夹，其中存放有应用程序运行所需的库，并且该目录将在应用程序退出时被自动清除。</p><p>应用程序在运行时以该临时文件夹为其工作目录，这意味着诸如 <code>__file__</code> 变量和 <code>os</code>, <code>pathlib</code> 等库所获取到的路径将出现异常。</p><p>因此：</p><ol><li>通过 <code>pyinstaller app.py</code> 生成的多文件形式不能使用这种方式。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./dist/app/app-staticx 
<span class="token punctuation">[</span><span class="token number">1141</span><span class="token punctuation">]</span> Error loading Python lib <span class="token string">&#39;/tmp/staticx-EbFLcK/_internal/libpython3.10.so.1.0&#39;</span><span class="token builtin class-name">:</span> dlopen: /tmp/staticx-EbFLcK/_internal/libpython3.10.so.1.0: cannot <span class="token function">open</span> shared object file: No such <span class="token function">file</span> or directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>通过 <code>pyinstaller -F app.py</code> 生成的单文件形式也可能出现问题：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ staticx dist/app dist/app-staticx
staticx: /tmp/staticx-pyi-ct_w5qq1/base_library.zip: Invalid ELF image: Magic number does not match
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div>`,34);function x(f,_){const i=p("RouterLink"),t=p("ExternalLinkIcon");return o(),c("div",null,[n("div",r,[k,n("p",null,[s("python 静态编译参考： "),a(i,{to:"/dev/python/python-build.html"},{default:d(()=>[s("link")]),_:1})])]),v,m,n("ul",null,[n("li",null,[n("s",null,[n("a",b,[s("https://www.askpython.com/python/examples/compiling-applications-static-binary"),a(t)])]),s(" 太冗长")])]),h,n("p",null,[s("参数： "),n("a",g,[s("https://pythonhosted.org/PyInstaller/man/pyi-makespec.html?highlight=pyi"),a(t)])]),y])}const q=l(u,[["render",x],["__file","pyinstaller.html.vue"]]);export{q as default};
